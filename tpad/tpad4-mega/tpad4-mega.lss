
tpad4-mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001abc  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080017e  0080017e  00001bce  2**0
                  ALLOC
  3 .stab         00001224  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000483  00000000  00000000  00002df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000550  00000000  00000000  00003277  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e04  00000000  00000000  000037c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088c4  00000000  00000000  000045cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024f6  00000000  00000000  0000ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006f67  00000000  00000000  0000f385  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007c0  00000000  00000000  000162ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003561  00000000  00000000  00016aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003aed  00000000  00000000  0001a00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0001dafa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//   Refer to page 8 of the datasheet for more information.
// clockMode lets you set the PWM frequency for the diodes.
//   Refer to page 7 of the datasheet for more information.
a6281Packet led_createPacket(unsigned int redDotCorrect, unsigned int greenDotCorrect,
                               unsigned int blueDotCorrect, unsigned char clockMode)
{
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	ad c0       	rjmp	.+346    	; 0x160 <__bad_interrupt>
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
       8:	ab c0       	rjmp	.+342    	; 0x160 <__bad_interrupt>
       a:	00 00       	nop
       c:	a9 c0       	rjmp	.+338    	; 0x160 <__bad_interrupt>
       e:	00 00       	nop
      10:	a7 c0       	rjmp	.+334    	; 0x160 <__bad_interrupt>
      12:	00 00       	nop
      14:	a5 c0       	rjmp	.+330    	; 0x160 <__bad_interrupt>
      16:	00 00       	nop
      18:	a3 c0       	rjmp	.+326    	; 0x160 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a1 c0       	rjmp	.+322    	; 0x160 <__bad_interrupt>
      1e:	00 00       	nop
      20:	9f c0       	rjmp	.+318    	; 0x160 <__bad_interrupt>
      22:	00 00       	nop
      24:	9d c0       	rjmp	.+314    	; 0x160 <__bad_interrupt>
      26:	00 00       	nop
      28:	3e c5       	rjmp	.+2684   	; 0xaa6 <__vector_10>
      2a:	00 00       	nop
      2c:	01 c5       	rjmp	.+2562   	; 0xa30 <__vector_11>
      2e:	00 00       	nop
      30:	97 c0       	rjmp	.+302    	; 0x160 <__bad_interrupt>
      32:	00 00       	nop
      34:	95 c0       	rjmp	.+298    	; 0x160 <__bad_interrupt>
      36:	00 00       	nop
      38:	93 c0       	rjmp	.+294    	; 0x160 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	91 c0       	rjmp	.+290    	; 0x160 <__bad_interrupt>
      3e:	00 00       	nop
      40:	8f c0       	rjmp	.+286    	; 0x160 <__bad_interrupt>
      42:	00 00       	nop
      44:	8d c0       	rjmp	.+282    	; 0x160 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	89 c0       	rjmp	.+274    	; 0x160 <__bad_interrupt>
      4e:	00 00       	nop
      50:	87 c0       	rjmp	.+270    	; 0x160 <__bad_interrupt>
      52:	00 00       	nop
      54:	85 c0       	rjmp	.+266    	; 0x160 <__bad_interrupt>
      56:	00 00       	nop
      58:	83 c0       	rjmp	.+262    	; 0x160 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	81 c0       	rjmp	.+258    	; 0x160 <__bad_interrupt>
      5e:	00 00       	nop
      60:	7f c0       	rjmp	.+254    	; 0x160 <__bad_interrupt>
      62:	00 00       	nop
      64:	7d c0       	rjmp	.+250    	; 0x160 <__bad_interrupt>
      66:	00 00       	nop
      68:	7b c0       	rjmp	.+246    	; 0x160 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	79 c0       	rjmp	.+242    	; 0x160 <__bad_interrupt>
      6e:	00 00       	nop
      70:	77 c0       	rjmp	.+238    	; 0x160 <__bad_interrupt>
      72:	00 00       	nop
      74:	75 c0       	rjmp	.+234    	; 0x160 <__bad_interrupt>
      76:	00 00       	nop
      78:	73 c0       	rjmp	.+230    	; 0x160 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	71 c0       	rjmp	.+226    	; 0x160 <__bad_interrupt>
      7e:	00 00       	nop
      80:	6f c0       	rjmp	.+222    	; 0x160 <__bad_interrupt>
      82:	00 00       	nop
      84:	6d c0       	rjmp	.+218    	; 0x160 <__bad_interrupt>
      86:	00 00       	nop
      88:	6b c0       	rjmp	.+214    	; 0x160 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	69 c0       	rjmp	.+210    	; 0x160 <__bad_interrupt>
      8e:	00 00       	nop
      90:	67 c0       	rjmp	.+206    	; 0x160 <__bad_interrupt>
      92:	00 00       	nop
      94:	65 c0       	rjmp	.+202    	; 0x160 <__bad_interrupt>
      96:	00 00       	nop
      98:	63 c0       	rjmp	.+198    	; 0x160 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	61 c0       	rjmp	.+194    	; 0x160 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	5f c0       	rjmp	.+190    	; 0x160 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5d c0       	rjmp	.+186    	; 0x160 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5b c0       	rjmp	.+182    	; 0x160 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 44 20 00 00 01 02     ..........D ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	0e 03 74 00 6d 00 70 00 76 00 61 00 72 00 00 00     ..t.m.p.v.a.r...

00000110 <ProductString>:
     110:	16 03 74 00 70 00 61 00 64 00 34 00 2d 00 6d 00     ..t.p.a.d.4.-.m.
     120:	65 00 67 00 61 00 00 00                             e.g.a...

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	da e0       	ldi	r29, 0x0A	; 10
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61

00000134 <__do_copy_data>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a0 e0       	ldi	r26, 0x00	; 0
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	ec eb       	ldi	r30, 0xBC	; 188
     13c:	fa e1       	ldi	r31, 0x1A	; 26
     13e:	02 c0       	rjmp	.+4      	; 0x144 <.do_copy_data_start>

00000140 <.do_copy_data_loop>:
     140:	05 90       	lpm	r0, Z+
     142:	0d 92       	st	X+, r0

00000144 <.do_copy_data_start>:
     144:	ae 37       	cpi	r26, 0x7E	; 126
     146:	b1 07       	cpc	r27, r17
     148:	d9 f7       	brne	.-10     	; 0x140 <.do_copy_data_loop>

0000014a <__do_clear_bss>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	ae e7       	ldi	r26, 0x7E	; 126
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
     152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
     154:	a2 3d       	cpi	r26, 0xD2	; 210
     156:	b1 07       	cpc	r27, r17
     158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
     15a:	31 d2       	rcall	.+1122   	; 0x5be <main>
     15c:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_exit>

00000160 <__bad_interrupt>:
     160:	4f cf       	rjmp	.-354    	; 0x0 <__vectors>

00000162 <ADC_SetupChannel>:
			 *  \warning The channel number must be specified as an integer, and <b>not</b> a \c ADC_CHANNEL* mask.
			 *
			 *  \param[in] ChannelIndex  ADC channel number to set up for conversions.
			 */
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
     162:	28 2f       	mov	r18, r24
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
				DIDR0 |=  (1 << ChannelIndex);
				#elif (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
				if (ChannelIndex < 8)
     164:	88 30       	cpi	r24, 0x08	; 8
     166:	90 f4       	brcc	.+36     	; 0x18c <ADC_SetupChannel+0x2a>
				{
					DDRF  &= ~(1 << ChannelIndex);
     168:	30 b3       	in	r19, 0x10	; 16
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 c0       	rjmp	.+4      	; 0x174 <ADC_SetupChannel+0x12>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	2a 95       	dec	r18
     176:	e2 f7       	brpl	.-8      	; 0x170 <ADC_SetupChannel+0xe>
     178:	28 2f       	mov	r18, r24
     17a:	20 95       	com	r18
     17c:	23 23       	and	r18, r19
     17e:	20 bb       	out	0x10, r18	; 16
					DIDR0 |=  (1 << ChannelIndex);
     180:	20 91 7e 00 	lds	r18, 0x007E
     184:	82 2b       	or	r24, r18
     186:	80 93 7e 00 	sts	0x007E, r24
     18a:	08 95       	ret
				}
				else if (ChannelIndex == 8)
     18c:	88 30       	cpi	r24, 0x08	; 8
     18e:	29 f4       	brne	.+10     	; 0x19a <ADC_SetupChannel+0x38>
				{
					DDRD  &= ~(1 << 4);
     190:	54 98       	cbi	0x0a, 4	; 10
					DIDR2 |=  (1 << 0);
     192:	80 91 7d 00 	lds	r24, 0x007D
     196:	81 60       	ori	r24, 0x01	; 1
     198:	31 c0       	rjmp	.+98     	; 0x1fc <ADC_SetupChannel+0x9a>
     19a:	68 2f       	mov	r22, r24
     19c:	70 e0       	ldi	r23, 0x00	; 0
				}
				else if (ChannelIndex < 11)
     19e:	8b 30       	cpi	r24, 0x0B	; 11
     1a0:	a0 f4       	brcc	.+40     	; 0x1ca <ADC_SetupChannel+0x68>
				{
					DDRD  &= ~(1 << (ChannelIndex - 3));
     1a2:	4a b1       	in	r20, 0x0a	; 10
     1a4:	63 50       	subi	r22, 0x03	; 3
     1a6:	70 40       	sbci	r23, 0x00	; 0
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	c9 01       	movw	r24, r18
     1ae:	06 2e       	mov	r0, r22
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <ADC_SetupChannel+0x54>
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	0a 94       	dec	r0
     1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <ADC_SetupChannel+0x50>
     1ba:	80 95       	com	r24
     1bc:	84 23       	and	r24, r20
     1be:	8a b9       	out	0x0a, r24	; 10
					DIDR2 |=  (1 << (ChannelIndex - 8));
     1c0:	80 91 7d 00 	lds	r24, 0x007D
     1c4:	65 50       	subi	r22, 0x05	; 5
     1c6:	70 40       	sbci	r23, 0x00	; 0
     1c8:	13 c0       	rjmp	.+38     	; 0x1f0 <ADC_SetupChannel+0x8e>
				}
				else
				{
					DDRB  &= ~(1 << (ChannelIndex - 7));
     1ca:	44 b1       	in	r20, 0x04	; 4
     1cc:	67 50       	subi	r22, 0x07	; 7
     1ce:	70 40       	sbci	r23, 0x00	; 0
     1d0:	21 e0       	ldi	r18, 0x01	; 1
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	c9 01       	movw	r24, r18
     1d6:	06 2e       	mov	r0, r22
     1d8:	02 c0       	rjmp	.+4      	; 0x1de <ADC_SetupChannel+0x7c>
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	0a 94       	dec	r0
     1e0:	e2 f7       	brpl	.-8      	; 0x1da <ADC_SetupChannel+0x78>
     1e2:	80 95       	com	r24
     1e4:	84 23       	and	r24, r20
     1e6:	84 b9       	out	0x04, r24	; 4
					DIDR2 |=  (1 << (ChannelIndex - 8));
     1e8:	80 91 7d 00 	lds	r24, 0x007D
     1ec:	61 50       	subi	r22, 0x01	; 1
     1ee:	70 40       	sbci	r23, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <ADC_SetupChannel+0x94>
     1f2:	22 0f       	add	r18, r18
     1f4:	33 1f       	adc	r19, r19
     1f6:	6a 95       	dec	r22
     1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <ADC_SetupChannel+0x90>
     1fa:	82 2b       	or	r24, r18
     1fc:	80 93 7d 00 	sts	0x007D, r24
     200:	08 95       	ret

00000202 <EVENT_CDC_Device_ControLineStateChanged>:
void EVENT_USB_Device_ControlRequest(void) {
  CDC_Device_ProcessControlRequest(&tpad_CDC_Interface);
}

void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo) {
  connected = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     202:	fc 01       	movw	r30, r24
     204:	80 89       	ldd	r24, Z+16	; 0x10
     206:	91 89       	ldd	r25, Z+17	; 0x11
     208:	81 70       	andi	r24, 0x01	; 1
     20a:	90 70       	andi	r25, 0x00	; 0
     20c:	80 93 9b 01 	sts	0x019B, r24
}
     210:	08 95       	ret

00000212 <EVENT_USB_Device_ControlRequest>:
  ConfigSuccess &= CDC_Device_ConfigureEndpoints(&tpad_CDC_Interface);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
  CDC_Device_ProcessControlRequest(&tpad_CDC_Interface);
     212:	82 e5       	ldi	r24, 0x52	; 82
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <CDC_Device_ProcessControlRequest>

0000021a <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
  bool ConfigSuccess = true;
  ConfigSuccess &= CDC_Device_ConfigureEndpoints(&tpad_CDC_Interface);
     21a:	82 e5       	ldi	r24, 0x52	; 82
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <CDC_Device_ConfigureEndpoints>

00000222 <ButtonStates>:
  ADC_SetupChannel(5);

  PORTB = 0xFF;
}

void ButtonStates(void) {
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	df 93       	push	r29
     22c:	cf 93       	push	r28
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	c0 54       	subi	r28, 0x40	; 64
     234:	d0 40       	sbci	r29, 0x00	; 0
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
  char buffer[64];

  uint16_t result;
  if (!reading) {
     240:	80 91 80 01 	lds	r24, 0x0180
     244:	88 23       	and	r24, r24
     246:	09 f5       	brne	.+66     	; 0x28a <ButtonStates+0x68>
    ADC_StartReading(ADC_REFERENCE_AVCC | ADC_LEFT_ADJUSTED | buttonChannels[button]);
     248:	e0 91 7e 01 	lds	r30, 0x017E
     24c:	f0 91 7f 01 	lds	r31, 0x017F
     250:	ee 0f       	add	r30, r30
     252:	ff 1f       	adc	r31, r31
     254:	e3 59       	subi	r30, 0x93	; 147
     256:	fe 4f       	sbci	r31, 0xFE	; 254
     258:	80 81       	ld	r24, Z
     25a:	91 81       	ldd	r25, Z+1	; 0x01
     25c:	80 66       	ori	r24, 0x60	; 96
			 *
			 *  \param[in] MUXMask  ADC channel mask, reference mask and adjustment mask.
			 */
			static inline void ADC_StartReading(const uint16_t MUXMask)
			{
				ADMUX = MUXMask;
     25e:	80 93 7c 00 	sts	0x007C, r24

				#if (defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) || defined(__DOXYGEN__))
				if (MUXMask & (1 << 8))
     262:	90 ff       	sbrs	r25, 0
     264:	04 c0       	rjmp	.+8      	; 0x26e <ButtonStates+0x4c>
				  ADCSRB |=  (1 << MUX5);
     266:	80 91 7b 00 	lds	r24, 0x007B
     26a:	80 62       	ori	r24, 0x20	; 32
     26c:	03 c0       	rjmp	.+6      	; 0x274 <ButtonStates+0x52>
				else
				  ADCSRB &= ~(1 << MUX5);
     26e:	80 91 7b 00 	lds	r24, 0x007B
     272:	8f 7d       	andi	r24, 0xDF	; 223
     274:	80 93 7b 00 	sts	0x007B, r24
				#endif

				ADCSRA |= (1 << ADSC);
     278:	80 91 7a 00 	lds	r24, 0x007A
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	80 93 7a 00 	sts	0x007A, r24
    reading = true;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 80 01 	sts	0x0180, r24
     288:	c0 c0       	rjmp	.+384    	; 0x40a <ButtonStates+0x1e8>
			 *          complete and ready to be read out with \ref ADC_GetResult().
			 */
			static inline bool ADC_IsReadingComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool ADC_IsReadingComplete(void)
			{
				return ((ADCSRA & (1 << ADIF)) ? true : false);
     28a:	80 91 7a 00 	lds	r24, 0x007A
  } else if (ADC_IsReadingComplete()) {
     28e:	84 ff       	sbrs	r24, 4
     290:	bc c0       	rjmp	.+376    	; 0x40a <ButtonStates+0x1e8>
			 *  \return The result of the last ADC conversion as an unsigned value.
			 */
			static inline uint16_t ADC_GetResult(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t ADC_GetResult(void)
			{
				ADCSRA |= (1 << ADIF);
     292:	80 91 7a 00 	lds	r24, 0x007A
     296:	80 61       	ori	r24, 0x10	; 16
     298:	80 93 7a 00 	sts	0x007A, r24
				return ADC;
     29c:	e0 90 78 00 	lds	r14, 0x0078
     2a0:	f0 90 79 00 	lds	r15, 0x0079
    result = ADC_GetResult();

    if (result < 150) {
     2a4:	86 e9       	ldi	r24, 0x96	; 150
     2a6:	e8 16       	cp	r14, r24
     2a8:	f1 04       	cpc	r15, r1
     2aa:	10 f4       	brcc	.+4      	; 0x2b0 <ButtonStates+0x8e>
     2ac:	ee 24       	eor	r14, r14
     2ae:	ff 24       	eor	r15, r15
      result = 0;
    }

    if (results[button] != result) {
     2b0:	40 91 7e 01 	lds	r20, 0x017E
     2b4:	50 91 7f 01 	lds	r21, 0x017F
     2b8:	9a 01       	movw	r18, r20
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	f9 01       	movw	r30, r18
     2c0:	eb 54       	subi	r30, 0x4B	; 75
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	80 81       	ld	r24, Z
     2c6:	91 81       	ldd	r25, Z+1	; 0x01
     2c8:	8e 15       	cp	r24, r14
     2ca:	9f 05       	cpc	r25, r15
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <ButtonStates+0xae>
     2ce:	8c c0       	rjmp	.+280    	; 0x3e8 <ButtonStates+0x1c6>


      if (!connected) {
     2d0:	80 91 9b 01 	lds	r24, 0x019B
     2d4:	88 23       	and	r24, r24
     2d6:	09 f0       	breq	.+2      	; 0x2da <ButtonStates+0xb8>
     2d8:	54 c0       	rjmp	.+168    	; 0x382 <ButtonStates+0x160>
        if (result < 1000) {
     2da:	98 ee       	ldi	r25, 0xE8	; 232
     2dc:	e9 16       	cp	r14, r25
     2de:	93 e0       	ldi	r25, 0x03	; 3
     2e0:	f9 06       	cpc	r15, r25
     2e2:	60 f4       	brcc	.+24     	; 0x2fc <ButtonStates+0xda>
          colors[button][0] = 0;
     2e4:	f9 01       	movw	r30, r18
     2e6:	e4 0f       	add	r30, r20
     2e8:	f5 1f       	adc	r31, r21
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	df 01       	movw	r26, r30
     2f0:	af 57       	subi	r26, 0x7F	; 127
     2f2:	be 4f       	sbci	r27, 0xFE	; 254
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	1c 92       	st	X, r1
     2f8:	1e 92       	st	-X, r1
     2fa:	12 c0       	rjmp	.+36     	; 0x320 <ButtonStates+0xfe>
          colors[button][1] = 0;
          colors[button][2] = 0;
        } else if (result < 8000) {
     2fc:	a0 e4       	ldi	r26, 0x40	; 64
     2fe:	ea 16       	cp	r14, r26
     300:	af e1       	ldi	r26, 0x1F	; 31
     302:	fa 06       	cpc	r15, r26
     304:	b0 f4       	brcc	.+44     	; 0x332 <ButtonStates+0x110>
          colors[button][0] = 1023;
     306:	f9 01       	movw	r30, r18
     308:	e4 0f       	add	r30, r20
     30a:	f5 1f       	adc	r31, r21
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	df 01       	movw	r26, r30
     312:	af 57       	subi	r26, 0x7F	; 127
     314:	be 4f       	sbci	r27, 0xFE	; 254
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	9c 93       	st	X, r25
     31e:	8e 93       	st	-X, r24
          colors[button][1] = 0;
     320:	ed 57       	subi	r30, 0x7D	; 125
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	11 82       	std	Z+1, r1	; 0x01
     326:	10 82       	st	Z, r1
          colors[button][2] = 0;
     328:	15 96       	adiw	r26, 0x05	; 5
     32a:	1c 92       	st	X, r1
     32c:	1e 92       	st	-X, r1
     32e:	14 97       	sbiw	r26, 0x04	; 4
     330:	51 c0       	rjmp	.+162    	; 0x3d4 <ButtonStates+0x1b2>
     332:	d9 01       	movw	r26, r18
     334:	a4 0f       	add	r26, r20
     336:	b5 1f       	adc	r27, r21
        } else if (result < 13000) {
     338:	88 ec       	ldi	r24, 0xC8	; 200
     33a:	e8 16       	cp	r14, r24
     33c:	82 e3       	ldi	r24, 0x32	; 50
     33e:	f8 06       	cpc	r15, r24
     340:	80 f4       	brcc	.+32     	; 0x362 <ButtonStates+0x140>
          colors[button][0] = 0;
     342:	aa 0f       	add	r26, r26
     344:	bb 1f       	adc	r27, r27
     346:	fd 01       	movw	r30, r26
     348:	ef 57       	subi	r30, 0x7F	; 127
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	11 82       	std	Z+1, r1	; 0x01
     34e:	10 82       	st	Z, r1
          colors[button][1] = 1023;
     350:	ad 57       	subi	r26, 0x7D	; 125
     352:	be 4f       	sbci	r27, 0xFE	; 254
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	93 e0       	ldi	r25, 0x03	; 3
     358:	8d 93       	st	X+, r24
     35a:	9c 93       	st	X, r25
          colors[button][2] = 0;
     35c:	15 82       	std	Z+5, r1	; 0x05
     35e:	14 82       	std	Z+4, r1	; 0x04
     360:	39 c0       	rjmp	.+114    	; 0x3d4 <ButtonStates+0x1b2>
        } else {
          colors[button][0] = 0;
     362:	aa 0f       	add	r26, r26
     364:	bb 1f       	adc	r27, r27
     366:	fd 01       	movw	r30, r26
     368:	ef 57       	subi	r30, 0x7F	; 127
     36a:	fe 4f       	sbci	r31, 0xFE	; 254
     36c:	11 82       	std	Z+1, r1	; 0x01
     36e:	10 82       	st	Z, r1
          colors[button][1] = 0;
     370:	ad 57       	subi	r26, 0x7D	; 125
     372:	be 4f       	sbci	r27, 0xFE	; 254
     374:	1d 92       	st	X+, r1
     376:	1c 92       	st	X, r1
          colors[button][2] = 1023;
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	93 e0       	ldi	r25, 0x03	; 3
     37c:	95 83       	std	Z+5, r25	; 0x05
     37e:	84 83       	std	Z+4, r24	; 0x04
     380:	29 c0       	rjmp	.+82     	; 0x3d4 <ButtonStates+0x1b2>
        }
      // ignore the bounces at the bottom of the pressure range
      } else {
        sprintf(buffer, "%d,%u\n", button, result);
     382:	ad b7       	in	r26, 0x3d	; 61
     384:	be b7       	in	r27, 0x3e	; 62
     386:	18 97       	sbiw	r26, 0x08	; 8
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	be bf       	out	0x3e, r27	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	ad bf       	out	0x3d, r26	; 61
     392:	ed b7       	in	r30, 0x3d	; 61
     394:	fe b7       	in	r31, 0x3e	; 62
     396:	31 96       	adiw	r30, 0x01	; 1
     398:	8e 01       	movw	r16, r28
     39a:	0f 5f       	subi	r16, 0xFF	; 255
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	1c 93       	st	X, r17
     3a2:	0e 93       	st	-X, r16
     3a4:	11 97       	sbiw	r26, 0x01	; 1
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	93 83       	std	Z+3, r25	; 0x03
     3ac:	82 83       	std	Z+2, r24	; 0x02
     3ae:	55 83       	std	Z+5, r21	; 0x05
     3b0:	44 83       	std	Z+4, r20	; 0x04
     3b2:	f7 82       	std	Z+7, r15	; 0x07
     3b4:	e6 82       	std	Z+6, r14	; 0x06
     3b6:	0e 94 96 0a 	call	0x152c	; 0x152c <sprintf>
        fputs(buffer, &USBSerialStream);
     3ba:	8d b7       	in	r24, 0x3d	; 61
     3bc:	9e b7       	in	r25, 0x3e	; 62
     3be:	08 96       	adiw	r24, 0x08	; 8
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	9e bf       	out	0x3e, r25	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	8d bf       	out	0x3d, r24	; 61
     3ca:	c8 01       	movw	r24, r16
     3cc:	6d e9       	ldi	r22, 0x9D	; 157
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <fputs>
      }

      results[button] = result;
     3d4:	e0 91 7e 01 	lds	r30, 0x017E
     3d8:	f0 91 7f 01 	lds	r31, 0x017F
     3dc:	ee 0f       	add	r30, r30
     3de:	ff 1f       	adc	r31, r31
     3e0:	eb 54       	subi	r30, 0x4B	; 75
     3e2:	fe 4f       	sbci	r31, 0xFE	; 254
     3e4:	f1 82       	std	Z+1, r15	; 0x01
     3e6:	e0 82       	st	Z, r14
    }

    button++;
     3e8:	80 91 7e 01 	lds	r24, 0x017E
     3ec:	90 91 7f 01 	lds	r25, 0x017F
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	90 93 7f 01 	sts	0x017F, r25
     3f6:	80 93 7e 01 	sts	0x017E, r24
    if (button > 3) {
     3fa:	04 97       	sbiw	r24, 0x04	; 4
     3fc:	24 f0       	brlt	.+8      	; 0x406 <ButtonStates+0x1e4>
      button = 0;
     3fe:	10 92 7f 01 	sts	0x017F, r1
     402:	10 92 7e 01 	sts	0x017E, r1
    }
    reading = false;
     406:	10 92 80 01 	sts	0x0180, r1
  }
}
     40a:	c0 5c       	subi	r28, 0xC0	; 192
     40c:	df 4f       	sbci	r29, 0xFF	; 255
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
     418:	cf 91       	pop	r28
     41a:	df 91       	pop	r29
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	08 95       	ret

00000426 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     426:	84 b7       	in	r24, 0x34	; 52
     428:	87 7f       	andi	r24, 0xF7	; 247
     42a:	84 bf       	out	0x34, r24	; 52
  wdt_disable();
     42c:	88 e1       	ldi	r24, 0x18	; 24
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	80 93 60 00 	sts	0x0060, r24
     436:	10 92 60 00 	sts	0x0060, r1
     43a:	0f be       	out	0x3f, r0	; 63

  /* Disable clock division */
  clock_prescale_set(clock_div_1);
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	20 e8       	ldi	r18, 0x80	; 128
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	20 93 61 00 	sts	0x0061, r18
     44a:	80 93 61 00 	sts	0x0061, r24
     44e:	0f be       	out	0x3f, r0	; 63
  USB_Init();
     450:	d7 d2       	rcall	.+1454   	; 0xa00 <USB_Init>

  //
  // Setup sensor power pins
  //
  DDRB = 0;
     452:	14 b8       	out	0x04, r1	; 4

  led_setup();
     454:	96 d1       	rcall	.+812    	; 0x782 <led_setup>
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(const uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(const uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     456:	85 ea       	ldi	r24, 0xA5	; 165
     458:	80 93 7a 00 	sts	0x007A, r24

  // Configure ADC
  ADC_Init(ADC_PRESCALE_32 | ADC_FREE_RUNNING);

  ADC_SetupChannel(0);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	81 de       	rcall	.-766    	; 0x162 <ADC_SetupChannel>
  ADC_SetupChannel(1);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	7f de       	rcall	.-770    	; 0x162 <ADC_SetupChannel>
  ADC_SetupChannel(4);
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	7d de       	rcall	.-774    	; 0x162 <ADC_SetupChannel>
  ADC_SetupChannel(5);
     468:	85 e0       	ldi	r24, 0x05	; 5
     46a:	7b de       	rcall	.-778    	; 0x162 <ADC_SetupChannel>

  PORTB = 0xFF;
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	85 b9       	out	0x05, r24	; 5
}
     470:	08 95       	ret

00000472 <parseChunk>:
}


int parserPos = 0, bufferPos;
char colorBuffer[8];
void parseChunk(uint16_t byte) {
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	28 2f       	mov	r18, r24
  char current = (char)byte;

  if (current == ',' || current == '\n') {
     478:	8c 32       	cpi	r24, 0x2C	; 44
     47a:	11 f0       	breq	.+4      	; 0x480 <parseChunk+0xe>
     47c:	8a 30       	cpi	r24, 0x0A	; 10
     47e:	01 f5       	brne	.+64     	; 0x4c0 <parseChunk+0x4e>
    ParserState[parserPos] = atoi(colorBuffer);
     480:	0b ea       	ldi	r16, 0xAB	; 171
     482:	11 e0       	ldi	r17, 0x01	; 1
     484:	c8 01       	movw	r24, r16
     486:	0e 94 49 0a 	call	0x1492	; 0x1492 <atoi>
     48a:	20 91 99 01 	lds	r18, 0x0199
     48e:	30 91 9a 01 	lds	r19, 0x019A
     492:	f9 01       	movw	r30, r18
     494:	ee 0f       	add	r30, r30
     496:	ff 1f       	adc	r31, r31
     498:	e3 54       	subi	r30, 0x43	; 67
     49a:	fe 4f       	sbci	r31, 0xFE	; 254
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	80 83       	st	Z, r24

    memset(colorBuffer, 0, sizeof(colorBuffer));
     4a0:	88 e0       	ldi	r24, 0x08	; 8
     4a2:	d8 01       	movw	r26, r16
     4a4:	1d 92       	st	X+, r1
     4a6:	8a 95       	dec	r24
     4a8:	e9 f7       	brne	.-6      	; 0x4a4 <parseChunk+0x32>
    bufferPos = 0;
     4aa:	10 92 b4 01 	sts	0x01B4, r1
     4ae:	10 92 b3 01 	sts	0x01B3, r1
    parserPos++;
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	30 93 9a 01 	sts	0x019A, r19
     4ba:	20 93 99 01 	sts	0x0199, r18
     4be:	1e c0       	rjmp	.+60     	; 0x4fc <parseChunk+0x8a>
  } else {
    colorBuffer[bufferPos] = current;
     4c0:	80 91 b3 01 	lds	r24, 0x01B3
     4c4:	90 91 b4 01 	lds	r25, 0x01B4
     4c8:	fc 01       	movw	r30, r24
     4ca:	e5 55       	subi	r30, 0x55	; 85
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
     4ce:	20 83       	st	Z, r18
    bufferPos++;
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	90 93 b4 01 	sts	0x01B4, r25
     4d6:	80 93 b3 01 	sts	0x01B3, r24

    // avoid buffer overruns
    if (bufferPos > 7) {
     4da:	08 97       	sbiw	r24, 0x08	; 8
     4dc:	7c f0       	brlt	.+30     	; 0x4fc <parseChunk+0x8a>
      bufferPos = 0;
     4de:	10 92 b4 01 	sts	0x01B4, r1
     4e2:	10 92 b3 01 	sts	0x01B3, r1
      memset(colorBuffer, 0, sizeof(colorBuffer));
     4e6:	88 e0       	ldi	r24, 0x08	; 8
     4e8:	eb ea       	ldi	r30, 0xAB	; 171
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	df 01       	movw	r26, r30
     4ee:	1d 92       	st	X+, r1
     4f0:	8a 95       	dec	r24
     4f2:	e9 f7       	brne	.-6      	; 0x4ee <parseChunk+0x7c>
      // bail on this parse
      parserPos = 0;
     4f4:	10 92 9a 01 	sts	0x019A, r1
     4f8:	10 92 99 01 	sts	0x0199, r1
    }
  }

  if (parserPos > 3) {
     4fc:	80 91 99 01 	lds	r24, 0x0199
     500:	90 91 9a 01 	lds	r25, 0x019A
     504:	04 97       	sbiw	r24, 0x04	; 4
     506:	a4 f1       	brlt	.+104    	; 0x570 <parseChunk+0xfe>
    parserPos = 0;
     508:	10 92 9a 01 	sts	0x019A, r1
     50c:	10 92 99 01 	sts	0x0199, r1
    bufferPos = 0;
     510:	10 92 b4 01 	sts	0x01B4, r1
     514:	10 92 b3 01 	sts	0x01B3, r1

    colors[ParserState[0]][0] = ParserState[1];
     518:	80 91 bd 01 	lds	r24, 0x01BD
     51c:	90 91 be 01 	lds	r25, 0x01BE
     520:	fc 01       	movw	r30, r24
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	e8 0f       	add	r30, r24
     528:	f9 1f       	adc	r31, r25
     52a:	ee 0f       	add	r30, r30
     52c:	ff 1f       	adc	r31, r31
     52e:	df 01       	movw	r26, r30
     530:	af 57       	subi	r26, 0x7F	; 127
     532:	be 4f       	sbci	r27, 0xFE	; 254
     534:	80 91 bf 01 	lds	r24, 0x01BF
     538:	90 91 c0 01 	lds	r25, 0x01C0
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	9c 93       	st	X, r25
     540:	8e 93       	st	-X, r24
    colors[ParserState[0]][1] = ParserState[2];
     542:	ed 57       	subi	r30, 0x7D	; 125
     544:	fe 4f       	sbci	r31, 0xFE	; 254
     546:	80 91 c1 01 	lds	r24, 0x01C1
     54a:	90 91 c2 01 	lds	r25, 0x01C2
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
    colors[ParserState[0]][2] = ParserState[3];
     552:	80 91 c3 01 	lds	r24, 0x01C3
     556:	90 91 c4 01 	lds	r25, 0x01C4
     55a:	15 96       	adiw	r26, 0x05	; 5
     55c:	9c 93       	st	X, r25
     55e:	8e 93       	st	-X, r24
     560:	14 97       	sbiw	r26, 0x04	; 4
    memset(ParserState, 0, sizeof(ParserState));
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	ed eb       	ldi	r30, 0xBD	; 189
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	df 01       	movw	r26, r30
     56a:	1d 92       	st	X+, r1
     56c:	8a 95       	dec	r24
     56e:	e9 f7       	brne	.-6      	; 0x56a <parseChunk+0xf8>
  }
}
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	08 95       	ret

00000576 <updateLeds>:
  { 0, 0, 0},
  { 0, 0, 0},
  { 0, 0, 0}
};

void updateLeds(void) {
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	c5 e7       	ldi	r28, 0x75	; 117
     57c:	d1 e0       	ldi	r29, 0x01	; 1
  for (int i = 0; i<4; i++) {
    led_send(
     57e:	89 91       	ld	r24, Y+
     580:	99 91       	ld	r25, Y+
     582:	fc 01       	movw	r30, r24
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	e8 0f       	add	r30, r24
     58a:	f9 1f       	adc	r31, r25
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	df 01       	movw	r26, r30
     592:	af 57       	subi	r26, 0x7F	; 127
     594:	be 4f       	sbci	r27, 0xFE	; 254
     596:	ed 57       	subi	r30, 0x7D	; 125
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	60 81       	ld	r22, Z
     59c:	71 81       	ldd	r23, Z+1	; 0x01
     59e:	14 96       	adiw	r26, 0x04	; 4
     5a0:	4d 91       	ld	r20, X+
     5a2:	5c 91       	ld	r21, X
     5a4:	15 97       	sbiw	r26, 0x05	; 5
     5a6:	8d 91       	ld	r24, X+
     5a8:	9c 91       	ld	r25, X
     5aa:	76 d0       	rcall	.+236    	; 0x698 <led_createColor>
     5ac:	c4 d0       	rcall	.+392    	; 0x736 <led_send>
  { 0, 0, 0},
  { 0, 0, 0}
};

void updateLeds(void) {
  for (int i = 0; i<4; i++) {
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	cd 37       	cpi	r28, 0x7D	; 125
     5b2:	d8 07       	cpc	r29, r24
     5b4:	21 f7       	brne	.-56     	; 0x57e <updateLeds+0x8>
        colors[buttonMapping[i]][2]
      )
    );
  }

  led_latch();
     5b6:	e2 d0       	rcall	.+452    	; 0x77c <led_latch>
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
  SetupHardware();
     5c4:	30 df       	rcall	.-416    	; 0x426 <SetupHardware>
  uint16_t bytesAvailable;

  CDC_Device_CreateStream(&tpad_CDC_Interface, &USBSerialStream);
     5c6:	82 e5       	ldi	r24, 0x52	; 82
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	6d e9       	ldi	r22, 0x9D	; 157
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	f4 d5       	rcall	.+3048   	; 0x11b8 <CDC_Device_CreateStream>
  sei();
     5d0:	78 94       	sei
    // Apply values to the buttons
    //
    updateLeds();

    if (connected && !wasConnected) {
      wasConnected = true;
     5d2:	11 e0       	ldi	r17, 0x01	; 1
  {

    //
    // Read pressures from 16 buttons
    //
    ButtonStates();
     5d4:	26 de       	rcall	.-948    	; 0x222 <ButtonStates>

    //
    // Apply values to the buttons
    //
    updateLeds();
     5d6:	cf df       	rcall	.-98     	; 0x576 <updateLeds>

    if (connected && !wasConnected) {
     5d8:	80 91 9b 01 	lds	r24, 0x019B
     5dc:	90 91 9c 01 	lds	r25, 0x019C
     5e0:	88 23       	and	r24, r24
     5e2:	81 f0       	breq	.+32     	; 0x604 <main+0x46>
     5e4:	99 23       	and	r25, r25
     5e6:	09 f0       	breq	.+2      	; 0x5ea <main+0x2c>
     5e8:	46 c0       	rjmp	.+140    	; 0x676 <main+0xb8>
      wasConnected = true;
     5ea:	10 93 9c 01 	sts	0x019C, r17
      fputs("tpad\n", &USBSerialStream);
     5ee:	87 e0       	ldi	r24, 0x07	; 7
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	6d e9       	ldi	r22, 0x9D	; 157
     5f4:	71 e0       	ldi	r23, 0x01	; 1
     5f6:	72 d7       	rcall	.+3812   	; 0x14dc <fputs>
      fputs("{\"name\": \"tpad4-mega\", \"version\":\"0.0.1\", \"leds\":true, \"pads\" : 4 }\n", &USBSerialStream);
     5f8:	8d e0       	ldi	r24, 0x0D	; 13
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	6d e9       	ldi	r22, 0x9D	; 157
     5fe:	71 e0       	ldi	r23, 0x01	; 1
     600:	6d d7       	rcall	.+3802   	; 0x14dc <fputs>
     602:	45 c0       	rjmp	.+138    	; 0x68e <main+0xd0>
    } else if (!connected && wasConnected) {
     604:	99 23       	and	r25, r25
     606:	b9 f1       	breq	.+110    	; 0x676 <main+0xb8>

      // reset colors
      for (int i = 0; i<4; i++) {
        colors[i][0] = 0;
     608:	10 92 82 01 	sts	0x0182, r1
     60c:	10 92 81 01 	sts	0x0181, r1
        colors[i][1] = 0;
     610:	10 92 84 01 	sts	0x0184, r1
     614:	10 92 83 01 	sts	0x0183, r1
        colors[i][2] = 0;
     618:	10 92 86 01 	sts	0x0186, r1
     61c:	10 92 85 01 	sts	0x0185, r1
      fputs("{\"name\": \"tpad4-mega\", \"version\":\"0.0.1\", \"leds\":true, \"pads\" : 4 }\n", &USBSerialStream);
    } else if (!connected && wasConnected) {

      // reset colors
      for (int i = 0; i<4; i++) {
        colors[i][0] = 0;
     620:	10 92 88 01 	sts	0x0188, r1
     624:	10 92 87 01 	sts	0x0187, r1
        colors[i][1] = 0;
     628:	10 92 8a 01 	sts	0x018A, r1
     62c:	10 92 89 01 	sts	0x0189, r1
        colors[i][2] = 0;
     630:	10 92 8c 01 	sts	0x018C, r1
     634:	10 92 8b 01 	sts	0x018B, r1
      fputs("{\"name\": \"tpad4-mega\", \"version\":\"0.0.1\", \"leds\":true, \"pads\" : 4 }\n", &USBSerialStream);
    } else if (!connected && wasConnected) {

      // reset colors
      for (int i = 0; i<4; i++) {
        colors[i][0] = 0;
     638:	10 92 8e 01 	sts	0x018E, r1
     63c:	10 92 8d 01 	sts	0x018D, r1
        colors[i][1] = 0;
     640:	10 92 90 01 	sts	0x0190, r1
     644:	10 92 8f 01 	sts	0x018F, r1
        colors[i][2] = 0;
     648:	10 92 92 01 	sts	0x0192, r1
     64c:	10 92 91 01 	sts	0x0191, r1
      fputs("{\"name\": \"tpad4-mega\", \"version\":\"0.0.1\", \"leds\":true, \"pads\" : 4 }\n", &USBSerialStream);
    } else if (!connected && wasConnected) {

      // reset colors
      for (int i = 0; i<4; i++) {
        colors[i][0] = 0;
     650:	10 92 94 01 	sts	0x0194, r1
     654:	10 92 93 01 	sts	0x0193, r1
        colors[i][1] = 0;
     658:	10 92 96 01 	sts	0x0196, r1
     65c:	10 92 95 01 	sts	0x0195, r1
        colors[i][2] = 0;
     660:	10 92 98 01 	sts	0x0198, r1
     664:	10 92 97 01 	sts	0x0197, r1
      }

      wasConnected = false;
     668:	10 92 9c 01 	sts	0x019C, r1
      parserPos = 0;
     66c:	10 92 9a 01 	sts	0x019A, r1
     670:	10 92 99 01 	sts	0x0199, r1
     674:	0c c0       	rjmp	.+24     	; 0x68e <main+0xd0>
    } else if ((bytesAvailable = CDC_Device_BytesReceived(&tpad_CDC_Interface))) {
     676:	82 e5       	ldi	r24, 0x52	; 82
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	2d d5       	rcall	.+2650   	; 0x10d6 <CDC_Device_BytesReceived>
     67c:	ec 01       	movw	r28, r24
     67e:	20 97       	sbiw	r28, 0x00	; 0
     680:	31 f0       	breq	.+12     	; 0x68e <main+0xd0>
      while (bytesAvailable--) {
        parseChunk(CDC_Device_ReceiveByte(&tpad_CDC_Interface));
     682:	82 e5       	ldi	r24, 0x52	; 82
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	5c d5       	rcall	.+2744   	; 0x1140 <CDC_Device_ReceiveByte>
     688:	f4 de       	rcall	.-536    	; 0x472 <parseChunk>
     68a:	21 97       	sbiw	r28, 0x01	; 1
     68c:	f8 cf       	rjmp	.-16     	; 0x67e <main+0xc0>
      }
    }

    CDC_Device_USBTask(&tpad_CDC_Interface);
     68e:	82 e5       	ldi	r24, 0x52	; 82
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	e5 d5       	rcall	.+3018   	; 0x125e <CDC_Device_USBTask>
    USB_USBTask();
     694:	0b d5       	rcall	.+2582   	; 0x10ac <USB_USBTask>
     696:	9e cf       	rjmp	.-196    	; 0x5d4 <main+0x16>

00000698 <led_createColor>:
// colorPacket returns a a6281Packet for setting color brightnesses
//
// red, green, and blue are brightness values from 0 to 1023. 0 is off, and
// 1023 is brightest.
a6281Packet led_createColor(unsigned int red, unsigned int green, unsigned int blue)
{
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
    //Make a packet and initialize all of the bits to zero.
    a6281Packet shiftbrite_packet = {value:0};
     6a0:	ee 24       	eor	r14, r14
     6a2:	ff 24       	eor	r15, r15
     6a4:	87 01       	movw	r16, r14

    shiftbrite_packet.red   = (red>1023) ? 1023 : red;
     6a6:	9c 01       	movw	r18, r24
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	20 30       	cpi	r18, 0x00	; 0
     6ac:	38 07       	cpc	r19, r24
     6ae:	10 f0       	brcs	.+4      	; 0x6b4 <led_createColor+0x1c>
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	33 e0       	ldi	r19, 0x03	; 3
     6b4:	02 2f       	mov	r16, r18
     6b6:	02 95       	swap	r16
     6b8:	00 7f       	andi	r16, 0xF0	; 240
     6ba:	82 2f       	mov	r24, r18
     6bc:	82 95       	swap	r24
     6be:	8f 70       	andi	r24, 0x0F	; 15
     6c0:	91 2f       	mov	r25, r17
     6c2:	90 7f       	andi	r25, 0xF0	; 240
     6c4:	98 2b       	or	r25, r24
     6c6:	83 2f       	mov	r24, r19
     6c8:	83 70       	andi	r24, 0x03	; 3
     6ca:	82 95       	swap	r24
     6cc:	80 7f       	andi	r24, 0xF0	; 240
     6ce:	9f 7c       	andi	r25, 0xCF	; 207
     6d0:	19 2f       	mov	r17, r25
     6d2:	18 2b       	or	r17, r24
    shiftbrite_packet.green = (green>1023) ? 1023 : green;
     6d4:	9b 01       	movw	r18, r22
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	60 30       	cpi	r22, 0x00	; 0
     6da:	78 07       	cpc	r23, r24
     6dc:	10 f0       	brcs	.+4      	; 0x6e2 <led_createColor+0x4a>
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	33 e0       	ldi	r19, 0x03	; 3
     6e2:	92 2f       	mov	r25, r18
     6e4:	99 0f       	add	r25, r25
     6e6:	99 0f       	add	r25, r25
     6e8:	8f 2d       	mov	r24, r15
     6ea:	83 70       	andi	r24, 0x03	; 3
     6ec:	f8 2e       	mov	r15, r24
     6ee:	f9 2a       	or	r15, r25
     6f0:	82 2f       	mov	r24, r18
     6f2:	82 95       	swap	r24
     6f4:	86 95       	lsr	r24
     6f6:	86 95       	lsr	r24
     6f8:	83 70       	andi	r24, 0x03	; 3
     6fa:	90 2f       	mov	r25, r16
     6fc:	9c 7f       	andi	r25, 0xFC	; 252
     6fe:	98 2b       	or	r25, r24
     700:	83 2f       	mov	r24, r19
     702:	83 70       	andi	r24, 0x03	; 3
     704:	88 0f       	add	r24, r24
     706:	88 0f       	add	r24, r24
     708:	93 7f       	andi	r25, 0xF3	; 243
     70a:	09 2f       	mov	r16, r25
     70c:	08 2b       	or	r16, r24
    shiftbrite_packet.blue  = (blue>1023) ? 1023 : blue;
     70e:	ca 01       	movw	r24, r20
     710:	24 e0       	ldi	r18, 0x04	; 4
     712:	40 30       	cpi	r20, 0x00	; 0
     714:	52 07       	cpc	r21, r18
     716:	10 f0       	brcs	.+4      	; 0x71c <led_createColor+0x84>
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	e8 2e       	mov	r14, r24
     71e:	89 2f       	mov	r24, r25
     720:	83 70       	andi	r24, 0x03	; 3
     722:	7f 2d       	mov	r23, r15
     724:	7c 7f       	andi	r23, 0xFC	; 252
     726:	78 2b       	or	r23, r24

    return shiftbrite_packet;
}
     728:	6e 2d       	mov	r22, r14
     72a:	c8 01       	movw	r24, r16
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	08 95       	ret

00000736 <led_send>:
{
    int i;
    for(i = 1; i < 32 + 1; i++)
    {
        //Set the appropriate Data In value according to the packet.
        if ((shiftbrite_packet.value >> (32 - i)) & 1)
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	6f e1       	ldi	r22, 0x1F	; 31
     73c:	70 e0       	ldi	r23, 0x00	; 0
            LED_PORT |= (1 << A6281_DATA_PIN);
        else
            LED_PORT &= ~(1 << A6281_DATA_PIN);

        //Toggle the clock bit twice.
        LED_PORT ^= (1 << A6281_CLOCK_PIN);
     73e:	e1 e0       	ldi	r30, 0x01	; 1
{
    int i;
    for(i = 1; i < 32 + 1; i++)
    {
        //Set the appropriate Data In value according to the packet.
        if ((shiftbrite_packet.value >> (32 - i)) & 1)
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	06 2e       	mov	r0, r22
     746:	04 c0       	rjmp	.+8      	; 0x750 <led_send+0x1a>
     748:	b6 95       	lsr	r27
     74a:	a7 95       	ror	r26
     74c:	97 95       	ror	r25
     74e:	87 95       	ror	r24
     750:	0a 94       	dec	r0
     752:	d2 f7       	brpl	.-12     	; 0x748 <led_send+0x12>
     754:	81 70       	andi	r24, 0x01	; 1
     756:	90 70       	andi	r25, 0x00	; 0
     758:	89 2b       	or	r24, r25
     75a:	11 f0       	breq	.+4      	; 0x760 <led_send+0x2a>
            LED_PORT |= (1 << A6281_DATA_PIN);
     75c:	5b 9a       	sbi	0x0b, 3	; 11
     75e:	01 c0       	rjmp	.+2      	; 0x762 <led_send+0x2c>
        else
            LED_PORT &= ~(1 << A6281_DATA_PIN);
     760:	5b 98       	cbi	0x0b, 3	; 11

        //Toggle the clock bit twice.
        LED_PORT ^= (1 << A6281_CLOCK_PIN);
     762:	8b b1       	in	r24, 0x0b	; 11
     764:	8e 27       	eor	r24, r30
     766:	8b b9       	out	0x0b, r24	; 11
        LED_PORT ^= (1 << A6281_CLOCK_PIN);
     768:	8b b1       	in	r24, 0x0b	; 11
     76a:	8e 27       	eor	r24, r30
     76c:	8b b9       	out	0x0b, r24	; 11
     76e:	61 50       	subi	r22, 0x01	; 1
     770:	70 40       	sbci	r23, 0x00	; 0
}

void led_send(a6281Packet shiftbrite_packet)
{
    int i;
    for(i = 1; i < 32 + 1; i++)
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	6f 3f       	cpi	r22, 0xFF	; 255
     776:	78 07       	cpc	r23, r24
     778:	19 f7       	brne	.-58     	; 0x740 <led_send+0xa>

        //Toggle the clock bit twice.
        LED_PORT ^= (1 << A6281_CLOCK_PIN);
        LED_PORT ^= (1 << A6281_CLOCK_PIN);
    }
}
     77a:	08 95       	ret

0000077c <led_latch>:

void led_latch()
{
    // Set Latch high
    LED_PORT |= (1 << A6281_LATCH_PIN);
     77c:	5a 9a       	sbi	0x0b, 2	; 11
    // Set Latch low
    LED_PORT &= ~(1 << A6281_LATCH_PIN);
     77e:	5a 98       	cbi	0x0b, 2	; 11
}
     780:	08 95       	ret

00000782 <led_setup>:

void led_setup() {
  // Set all to outputs.
  LED_OUTPUT_REGISTER |= (1 << A6281_DATA_PIN); // Data In
     782:	53 9a       	sbi	0x0a, 3	; 10
  LED_OUTPUT_REGISTER |= (1 << A6281_LATCH_PIN); // Latch
     784:	52 9a       	sbi	0x0a, 2	; 10
  LED_OUTPUT_REGISTER |= (1 << A6281_ENABLE_PIN); // Enable
     786:	51 9a       	sbi	0x0a, 1	; 10
  LED_OUTPUT_REGISTER |= (1 << A6281_CLOCK_PIN); // Clock
     788:	50 9a       	sbi	0x0a, 0	; 10

    // Set the Enable output low to enable the ShiftBrites.
  LED_PORT &= ~(1 << A6281_ENABLE_PIN);
     78a:	59 98       	cbi	0x0b, 1	; 11
     78c:	08 95       	ret

0000078e <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     78e:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     790:	92 30       	cpi	r25, 0x02	; 2
     792:	49 f0       	breq	.+18     	; 0x7a6 <CALLBACK_USB_GetDescriptor+0x18>
     794:	93 30       	cpi	r25, 0x03	; 3
     796:	61 f0       	breq	.+24     	; 0x7b0 <CALLBACK_USB_GetDescriptor+0x22>
     798:	91 30       	cpi	r25, 0x01	; 1
     79a:	f9 f4       	brne	.+62     	; 0x7da <CALLBACK_USB_GetDescriptor+0x4c>
     79c:	ec ea       	ldi	r30, 0xAC	; 172
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	22 e1       	ldi	r18, 0x12	; 18
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <CALLBACK_USB_GetDescriptor+0x54>
     7a6:	ee eb       	ldi	r30, 0xBE	; 190
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	2e e3       	ldi	r18, 0x3E	; 62
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	19 c0       	rjmp	.+50     	; 0x7e2 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	49 f0       	breq	.+18     	; 0x7c6 <CALLBACK_USB_GetDescriptor+0x38>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	18 f0       	brcs	.+6      	; 0x7be <CALLBACK_USB_GetDescriptor+0x30>
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	79 f4       	brne	.+30     	; 0x7da <CALLBACK_USB_GetDescriptor+0x4c>
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     7be:	ec ef       	ldi	r30, 0xFC	; 252
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	84 91       	lpm	r24, Z+
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     7c6:	e0 e0       	ldi	r30, 0x00	; 0
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	84 91       	lpm	r24, Z+
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     7ce:	e0 e1       	ldi	r30, 0x10	; 16
     7d0:	f1 e0       	ldi	r31, 0x01	; 1
     7d2:	84 91       	lpm	r24, Z+
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <CALLBACK_USB_GetDescriptor+0x54>
     7da:	e0 e0       	ldi	r30, 0x00	; 0
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     7e2:	ed 93       	st	X+, r30
     7e4:	fc 93       	st	X, r31
	return Size;
}
     7e6:	c9 01       	movw	r24, r18
     7e8:	08 95       	ret

000007ea <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     7ea:	38 2f       	mov	r19, r24
     7ec:	28 2f       	mov	r18, r24
     7ee:	2e c0       	rjmp	.+92     	; 0x84c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7f0:	82 2f       	mov	r24, r18
     7f2:	8f 70       	andi	r24, 0x0F	; 15
     7f4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     7f8:	23 17       	cp	r18, r19
     7fa:	21 f4       	brne	.+8      	; 0x804 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     7fc:	94 2f       	mov	r25, r20
     7fe:	76 2f       	mov	r23, r22
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	06 c0       	rjmp	.+12     	; 0x810 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     804:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     808:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     80c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     810:	91 ff       	sbrs	r25, 1
     812:	1b c0       	rjmp	.+54     	; 0x84a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     814:	80 91 eb 00 	lds	r24, 0x00EB
     818:	8e 7f       	andi	r24, 0xFE	; 254
     81a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     81e:	80 91 ed 00 	lds	r24, 0x00ED
     822:	8d 7f       	andi	r24, 0xFD	; 253
     824:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     828:	80 91 eb 00 	lds	r24, 0x00EB
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     832:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     836:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     83a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     83e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     842:	87 fd       	sbrc	r24, 7
     844:	02 c0       	rjmp	.+4      	; 0x84a <Endpoint_ConfigureEndpoint_Prv+0x60>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	27 30       	cpi	r18, 0x07	; 7
     84e:	80 f2       	brcs	.-96     	; 0x7f0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     850:	3f 70       	andi	r19, 0x0F	; 15
     852:	30 93 e9 00 	sts	0x00E9, r19
     856:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     858:	08 95       	ret

0000085a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	06 2f       	mov	r16, r22
     864:	ec 01       	movw	r28, r24
     866:	10 e0       	ldi	r17, 0x00	; 0
     868:	2a c0       	rjmp	.+84     	; 0x8be <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     86a:	98 81       	ld	r25, Y
     86c:	99 23       	and	r25, r25
     86e:	29 f1       	breq	.+74     	; 0x8ba <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     870:	6b 81       	ldd	r22, Y+3	; 0x03
     872:	e9 81       	ldd	r30, Y+1	; 0x01
     874:	fa 81       	ldd	r31, Y+2	; 0x02
     876:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     878:	89 2f       	mov	r24, r25
     87a:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     87c:	87 30       	cpi	r24, 0x07	; 7
     87e:	18 f5       	brcc	.+70     	; 0x8c6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     880:	22 30       	cpi	r18, 0x02	; 2
     882:	10 f4       	brcc	.+4      	; 0x888 <Endpoint_ConfigureEndpointTable+0x2e>
     884:	52 e0       	ldi	r21, 0x02	; 2
     886:	01 c0       	rjmp	.+2      	; 0x88a <Endpoint_ConfigureEndpointTable+0x30>
     888:	56 e0       	ldi	r21, 0x06	; 6
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	28 e0       	ldi	r18, 0x08	; 8
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	03 c0       	rjmp	.+6      	; 0x898 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     892:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     894:	22 0f       	add	r18, r18
     896:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     898:	2e 17       	cp	r18, r30
     89a:	3f 07       	cpc	r19, r31
     89c:	d0 f3       	brcs	.-12     	; 0x892 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     89e:	62 95       	swap	r22
     8a0:	66 0f       	add	r22, r22
     8a2:	66 0f       	add	r22, r22
     8a4:	60 7c       	andi	r22, 0xC0	; 192
     8a6:	99 1f       	adc	r25, r25
     8a8:	99 27       	eor	r25, r25
     8aa:	99 1f       	adc	r25, r25
     8ac:	69 2b       	or	r22, r25
     8ae:	42 95       	swap	r20
     8b0:	40 7f       	andi	r20, 0xF0	; 240
     8b2:	45 2b       	or	r20, r21
     8b4:	9a df       	rcall	.-204    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
     8b6:	88 23       	and	r24, r24
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     8ba:	1f 5f       	subi	r17, 0xFF	; 255
     8bc:	25 96       	adiw	r28, 0x05	; 5
     8be:	10 17       	cp	r17, r16
     8c0:	a0 f2       	brcs	.-88     	; 0x86a <Endpoint_ConfigureEndpointTable+0x10>
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <Endpoint_ConfigureEndpointTable+0x6e>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     8d2:	80 91 ca 01 	lds	r24, 0x01CA
     8d6:	88 23       	and	r24, r24
     8d8:	9c f4       	brge	.+38     	; 0x900 <Endpoint_ClearStatusStage+0x2e>
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8dc:	80 91 c9 01 	lds	r24, 0x01C9
     8e0:	88 23       	and	r24, r24
     8e2:	b9 f0       	breq	.+46     	; 0x912 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8e4:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     8e8:	82 ff       	sbrs	r24, 2
     8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8ec:	80 91 e8 00 	lds	r24, 0x00E8
     8f0:	8b 77       	andi	r24, 0x7B	; 123
     8f2:	80 93 e8 00 	sts	0x00E8, r24
     8f6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     8f8:	80 91 c9 01 	lds	r24, 0x01C9
     8fc:	88 23       	and	r24, r24
     8fe:	49 f0       	breq	.+18     	; 0x912 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     900:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     904:	80 ff       	sbrs	r24, 0
     906:	f8 cf       	rjmp	.-16     	; 0x8f8 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     908:	80 91 e8 00 	lds	r24, 0x00E8
     90c:	8e 77       	andi	r24, 0x7E	; 126
     90e:	80 93 e8 00 	sts	0x00E8, r24
     912:	08 95       	ret

00000914 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     914:	40 91 e4 00 	lds	r20, 0x00E4
     918:	50 91 e5 00 	lds	r21, 0x00E5
     91c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     91e:	80 91 ec 00 	lds	r24, 0x00EC
     922:	80 ff       	sbrs	r24, 0
     924:	24 c0       	rjmp	.+72     	; 0x96e <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     926:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     92a:	80 fd       	sbrc	r24, 0
     92c:	1e c0       	rjmp	.+60     	; 0x96a <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     92e:	80 91 c9 01 	lds	r24, 0x01C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     932:	88 23       	and	r24, r24
     934:	11 f4       	brne	.+4      	; 0x93a <Endpoint_WaitUntilReady+0x26>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     93a:	85 30       	cpi	r24, 0x05	; 5
     93c:	11 f4       	brne	.+4      	; 0x942 <Endpoint_WaitUntilReady+0x2e>
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     942:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     946:	85 ff       	sbrs	r24, 5
     948:	02 c0       	rjmp	.+4      	; 0x94e <Endpoint_WaitUntilReady+0x3a>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret
     94e:	80 91 e4 00 	lds	r24, 0x00E4
     952:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     956:	84 17       	cp	r24, r20
     958:	95 07       	cpc	r25, r21
     95a:	09 f3       	breq	.-62     	; 0x91e <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     95c:	22 23       	and	r18, r18
     95e:	11 f4       	brne	.+4      	; 0x964 <Endpoint_WaitUntilReady+0x50>
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	08 95       	ret
     964:	21 50       	subi	r18, 0x01	; 1
     966:	ac 01       	movw	r20, r24
     968:	da cf       	rjmp	.-76     	; 0x91e <Endpoint_WaitUntilReady+0xa>
     96a:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     96c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     96e:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     972:	82 ff       	sbrs	r24, 2
     974:	dc cf       	rjmp	.-72     	; 0x92e <Endpoint_WaitUntilReady+0x1a>
     976:	f9 cf       	rjmp	.-14     	; 0x96a <Endpoint_WaitUntilReady+0x56>

00000978 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     980:	4a d0       	rcall	.+148    	; 0xa16 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     982:	51 d0       	rcall	.+162    	; 0xa26 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     984:	08 ed       	ldi	r16, 0xD8	; 216
     986:	10 e0       	ldi	r17, 0x00	; 0
     988:	f8 01       	movw	r30, r16
     98a:	80 81       	ld	r24, Z
     98c:	8f 77       	andi	r24, 0x7F	; 127
     98e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     990:	80 81       	ld	r24, Z
     992:	80 68       	ori	r24, 0x80	; 128
     994:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     996:	80 81       	ld	r24, Z
     998:	8f 7d       	andi	r24, 0xDF	; 223
     99a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     99c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     99e:	10 92 c9 01 	sts	0x01C9, r1
	USB_Device_ConfigurationNumber  = 0;
     9a2:	10 92 c5 01 	sts	0x01C5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9a6:	10 92 c7 01 	sts	0x01C7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9aa:	10 92 c6 01 	sts	0x01C6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9ae:	80 ee       	ldi	r24, 0xE0	; 224
     9b0:	e8 2e       	mov	r14, r24
     9b2:	f1 2c       	mov	r15, r1
     9b4:	f7 01       	movw	r30, r14
     9b6:	80 81       	ld	r24, Z
     9b8:	8b 7f       	andi	r24, 0xFB	; 251
     9ba:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     9bc:	f8 01       	movw	r30, r16
     9be:	80 81       	ld	r24, Z
     9c0:	81 60       	ori	r24, 0x01	; 1
     9c2:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	42 e0       	ldi	r20, 0x02	; 2
     9ca:	0f df       	rcall	.-482    	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9cc:	e1 ee       	ldi	r30, 0xE1	; 225
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	80 81       	ld	r24, Z
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     9d6:	e2 ee       	ldi	r30, 0xE2	; 226
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	81 60       	ori	r24, 0x01	; 1
     9de:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     9e0:	80 81       	ld	r24, Z
     9e2:	88 60       	ori	r24, 0x08	; 8
     9e4:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     9e6:	f7 01       	movw	r30, r14
     9e8:	80 81       	ld	r24, Z
     9ea:	8e 7f       	andi	r24, 0xFE	; 254
     9ec:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     9ee:	f8 01       	movw	r30, r16
     9f0:	80 81       	ld	r24, Z
     9f2:	80 61       	ori	r24, 0x10	; 16
     9f4:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     a00:	e7 ed       	ldi	r30, 0xD7	; 215
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	81 60       	ori	r24, 0x01	; 1
     a08:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a0a:	84 e0       	ldi	r24, 0x04	; 4
     a0c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 c8 01 	sts	0x01C8, r24

	USB_ResetInterface();
}
     a14:	b1 cf       	rjmp	.-158    	; 0x978 <USB_ResetInterface>

00000a16 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a16:	e8 ed       	ldi	r30, 0xD8	; 216
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 81       	ld	r24, Z
     a1c:	8e 7f       	andi	r24, 0xFE	; 254
     a1e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a20:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     a24:	08 95       	ret

00000a26 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a26:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a2a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     a2e:	08 95       	ret

00000a30 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     a30:	1f 92       	push	r1
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	1f 93       	push	r17
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     a54:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     a58:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a5c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     a60:	80 91 f0 00 	lds	r24, 0x00F0
     a64:	87 7f       	andi	r24, 0xF7	; 247
     a66:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     a6a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     a6c:	b3 d1       	rcall	.+870    	; 0xdd4 <USB_Device_ProcessControlRequest>
     a6e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     a72:	80 91 f0 00 	lds	r24, 0x00F0
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	80 93 f0 00 	sts	0x00F0, r24
     a7c:	1f 70       	andi	r17, 0x0F	; 15
     a7e:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	bf 91       	pop	r27
     a88:	af 91       	pop	r26
     a8a:	9f 91       	pop	r25
     a8c:	8f 91       	pop	r24
     a8e:	7f 91       	pop	r23
     a90:	6f 91       	pop	r22
     a92:	5f 91       	pop	r21
     a94:	4f 91       	pop	r20
     a96:	3f 91       	pop	r19
     a98:	2f 91       	pop	r18
     a9a:	1f 91       	pop	r17
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	2f 93       	push	r18
     ab2:	3f 93       	push	r19
     ab4:	4f 93       	push	r20
     ab6:	5f 93       	push	r21
     ab8:	6f 93       	push	r22
     aba:	7f 93       	push	r23
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
     ac0:	af 93       	push	r26
     ac2:	bf 93       	push	r27
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ac8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     acc:	82 ff       	sbrs	r24, 2
     ace:	0a c0       	rjmp	.+20     	; 0xae4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ad0:	80 91 e2 00 	lds	r24, 0x00E2
     ad4:	82 ff       	sbrs	r24, 2
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ad8:	80 91 e1 00 	lds	r24, 0x00E1
     adc:	8b 7f       	andi	r24, 0xFB	; 251
     ade:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ae2:	e3 d2       	rcall	.+1478   	; 0x10aa <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ae4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ae8:	80 ff       	sbrs	r24, 0
     aea:	1d c0       	rjmp	.+58     	; 0xb26 <__stack+0x27>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     aec:	80 91 d8 00 	lds	r24, 0x00D8
     af0:	80 ff       	sbrs	r24, 0
     af2:	19 c0       	rjmp	.+50     	; 0xb26 <__stack+0x27>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     af4:	80 91 da 00 	lds	r24, 0x00DA
     af8:	8e 7f       	andi	r24, 0xFE	; 254
     afa:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     afe:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     b02:	80 ff       	sbrs	r24, 0
     b04:	0c c0       	rjmp	.+24     	; 0xb1e <__stack+0x1f>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b06:	80 e1       	ldi	r24, 0x10	; 16
     b08:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b0a:	82 e1       	ldi	r24, 0x12	; 18
     b0c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     b0e:	09 b4       	in	r0, 0x29	; 41
     b10:	00 fe       	sbrs	r0, 0
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <__stack+0xf>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 c9 01 	sts	0x01C9, r24
			EVENT_USB_Device_Connect();
     b1a:	c7 d2       	rcall	.+1422   	; 0x10aa <USB_Event_Stub>
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__stack+0x27>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b1e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     b20:	10 92 c9 01 	sts	0x01C9, r1
			EVENT_USB_Device_Disconnect();
     b24:	c2 d2       	rcall	.+1412   	; 0x10aa <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     b26:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b2a:	80 ff       	sbrs	r24, 0
     b2c:	18 c0       	rjmp	.+48     	; 0xb5e <__stack+0x5f>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b2e:	80 91 e2 00 	lds	r24, 0x00E2
     b32:	80 ff       	sbrs	r24, 0
     b34:	14 c0       	rjmp	.+40     	; 0xb5e <__stack+0x5f>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b36:	80 91 e2 00 	lds	r24, 0x00E2
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b40:	80 91 e2 00 	lds	r24, 0x00E2
     b44:	80 61       	ori	r24, 0x10	; 16
     b46:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b4a:	80 91 d8 00 	lds	r24, 0x00D8
     b4e:	80 62       	ori	r24, 0x20	; 32
     b50:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b54:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b56:	85 e0       	ldi	r24, 0x05	; 5
     b58:	80 93 c9 01 	sts	0x01C9, r24
		EVENT_USB_Device_Suspend();
     b5c:	a6 d2       	rcall	.+1356   	; 0x10aa <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b5e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b62:	84 ff       	sbrs	r24, 4
     b64:	2d c0       	rjmp	.+90     	; 0xbc0 <__stack+0xc1>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b66:	80 91 e2 00 	lds	r24, 0x00E2
     b6a:	84 ff       	sbrs	r24, 4
     b6c:	29 c0       	rjmp	.+82     	; 0xbc0 <__stack+0xc1>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b6e:	80 e1       	ldi	r24, 0x10	; 16
     b70:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b72:	82 e1       	ldi	r24, 0x12	; 18
     b74:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b76:	09 b4       	in	r0, 0x29	; 41
     b78:	00 fe       	sbrs	r0, 0
     b7a:	fd cf       	rjmp	.-6      	; 0xb76 <__stack+0x77>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
     b80:	8f 7d       	andi	r24, 0xDF	; 223
     b82:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b86:	80 91 e1 00 	lds	r24, 0x00E1
     b8a:	8f 7e       	andi	r24, 0xEF	; 239
     b8c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b90:	80 91 e2 00 	lds	r24, 0x00E2
     b94:	8f 7e       	andi	r24, 0xEF	; 239
     b96:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b9a:	80 91 e2 00 	lds	r24, 0x00E2
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     ba4:	80 91 c5 01 	lds	r24, 0x01C5
     ba8:	88 23       	and	r24, r24
     baa:	31 f4       	brne	.+12     	; 0xbb8 <__stack+0xb9>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bac:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bb0:	87 fd       	sbrc	r24, 7
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__stack+0xb9>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <__stack+0xbb>
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	80 93 c9 01 	sts	0x01C9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     bbe:	75 d2       	rcall	.+1258   	; 0x10aa <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     bc0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     bc4:	83 ff       	sbrs	r24, 3
     bc6:	27 c0       	rjmp	.+78     	; 0xc16 <__stack+0x117>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     bc8:	80 91 e2 00 	lds	r24, 0x00E2
     bcc:	83 ff       	sbrs	r24, 3
     bce:	23 c0       	rjmp	.+70     	; 0xc16 <__stack+0x117>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     bd0:	80 91 e1 00 	lds	r24, 0x00E1
     bd4:	87 7f       	andi	r24, 0xF7	; 247
     bd6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	80 93 c9 01 	sts	0x01C9, r24
		USB_Device_ConfigurationNumber = 0;
     be0:	10 92 c5 01 	sts	0x01C5, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     be4:	80 91 e1 00 	lds	r24, 0x00E1
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bee:	80 91 e2 00 	lds	r24, 0x00E2
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     bf8:	80 91 e2 00 	lds	r24, 0x00E2
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	42 e0       	ldi	r20, 0x02	; 2
     c08:	f0 dd       	rcall	.-1056   	; 0x7ea <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     c0a:	80 91 f0 00 	lds	r24, 0x00F0
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     c14:	4a d2       	rcall	.+1172   	; 0x10aa <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <Endpoint_Write_Control_Stream_LE>:
     c38:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c3a:	40 91 d0 01 	lds	r20, 0x01D0
     c3e:	50 91 d1 01 	lds	r21, 0x01D1
     c42:	46 17       	cp	r20, r22
     c44:	57 07       	cpc	r21, r23
     c46:	18 f4       	brcc	.+6      	; 0xc4e <Endpoint_Write_Control_Stream_LE+0x16>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     c48:	f9 01       	movw	r30, r18
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	45 c0       	rjmp	.+138    	; 0xcd8 <Endpoint_Write_Control_Stream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c4e:	61 15       	cp	r22, r1
     c50:	71 05       	cpc	r23, r1
     c52:	11 f0       	breq	.+4      	; 0xc58 <Endpoint_Write_Control_Stream_LE+0x20>
     c54:	ab 01       	movw	r20, r22
     c56:	f8 cf       	rjmp	.-16     	; 0xc48 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c58:	80 91 e8 00 	lds	r24, 0x00E8
     c5c:	8e 77       	andi	r24, 0x7E	; 126
     c5e:	80 93 e8 00 	sts	0x00E8, r24
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	f0 cf       	rjmp	.-32     	; 0xc48 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c68:	80 91 c9 01 	lds	r24, 0x01C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c6c:	88 23       	and	r24, r24
     c6e:	09 f4       	brne	.+2      	; 0xc72 <Endpoint_Write_Control_Stream_LE+0x3a>
     c70:	45 c0       	rjmp	.+138    	; 0xcfc <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c72:	85 30       	cpi	r24, 0x05	; 5
     c74:	09 f4       	brne	.+2      	; 0xc78 <Endpoint_Write_Control_Stream_LE+0x40>
     c76:	44 c0       	rjmp	.+136    	; 0xd00 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c78:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c7c:	83 ff       	sbrs	r24, 3
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <Endpoint_Write_Control_Stream_LE+0x4c>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c84:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c88:	82 fd       	sbrc	r24, 2
     c8a:	32 c0       	rjmp	.+100    	; 0xcf0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c8c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c90:	80 ff       	sbrs	r24, 0
     c92:	22 c0       	rjmp	.+68     	; 0xcd8 <Endpoint_Write_Control_Stream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c94:	80 91 f3 00 	lds	r24, 0x00F3
     c98:	90 91 f2 00 	lds	r25, 0x00F2
     c9c:	78 2f       	mov	r23, r24
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	29 2f       	mov	r18, r25
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	26 2b       	or	r18, r22
     ca6:	37 2b       	or	r19, r23
     ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <Endpoint_Write_Control_Stream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     caa:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     cac:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     cb0:	41 50       	subi	r20, 0x01	; 1
     cb2:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     cb8:	41 15       	cp	r20, r1
     cba:	51 05       	cpc	r21, r1
     cbc:	19 f0       	breq	.+6      	; 0xcc4 <Endpoint_Write_Control_Stream_LE+0x8c>
     cbe:	28 30       	cpi	r18, 0x08	; 8
     cc0:	31 05       	cpc	r19, r1
     cc2:	98 f3       	brcs	.-26     	; 0xcaa <Endpoint_Write_Control_Stream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	28 30       	cpi	r18, 0x08	; 8
     cc8:	31 05       	cpc	r19, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <Endpoint_Write_Control_Stream_LE+0x96>
     ccc:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cce:	80 91 e8 00 	lds	r24, 0x00E8
     cd2:	8e 77       	andi	r24, 0x7E	; 126
     cd4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     cd8:	41 15       	cp	r20, r1
     cda:	51 05       	cpc	r21, r1
     cdc:	29 f6       	brne	.-118    	; 0xc68 <Endpoint_Write_Control_Stream_LE+0x30>
     cde:	99 23       	and	r25, r25
     ce0:	19 f6       	brne	.-122    	; 0xc68 <Endpoint_Write_Control_Stream_LE+0x30>
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <Endpoint_Write_Control_Stream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ce4:	80 91 c9 01 	lds	r24, 0x01C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ce8:	88 23       	and	r24, r24
     cea:	41 f0       	breq	.+16     	; 0xcfc <Endpoint_Write_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cec:	85 30       	cpi	r24, 0x05	; 5
     cee:	41 f0       	breq	.+16     	; 0xd00 <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cf0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     cf4:	82 ff       	sbrs	r24, 2
     cf6:	f6 cf       	rjmp	.-20     	; 0xce4 <Endpoint_Write_Control_Stream_LE+0xac>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	08 95       	ret
     d00:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d02:	08 95       	ret

00000d04 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     d04:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d06:	40 91 d0 01 	lds	r20, 0x01D0
     d0a:	50 91 d1 01 	lds	r21, 0x01D1
     d0e:	46 17       	cp	r20, r22
     d10:	57 07       	cpc	r21, r23
     d12:	18 f4       	brcc	.+6      	; 0xd1a <Endpoint_Write_Control_PStream_LE+0x16>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d14:	f9 01       	movw	r30, r18
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	46 c0       	rjmp	.+140    	; 0xda6 <Endpoint_Write_Control_PStream_LE+0xa2>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     d1a:	61 15       	cp	r22, r1
     d1c:	71 05       	cpc	r23, r1
     d1e:	11 f0       	breq	.+4      	; 0xd24 <Endpoint_Write_Control_PStream_LE+0x20>
     d20:	ab 01       	movw	r20, r22
     d22:	f8 cf       	rjmp	.-16     	; 0xd14 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d24:	80 91 e8 00 	lds	r24, 0x00E8
     d28:	8e 77       	andi	r24, 0x7E	; 126
     d2a:	80 93 e8 00 	sts	0x00E8, r24
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	f0 cf       	rjmp	.-32     	; 0xd14 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d34:	80 91 c9 01 	lds	r24, 0x01C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <Endpoint_Write_Control_PStream_LE+0x3a>
     d3c:	47 c0       	rjmp	.+142    	; 0xdcc <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d3e:	85 30       	cpi	r24, 0x05	; 5
     d40:	09 f4       	brne	.+2      	; 0xd44 <Endpoint_Write_Control_PStream_LE+0x40>
     d42:	46 c0       	rjmp	.+140    	; 0xdd0 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d44:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     d48:	83 ff       	sbrs	r24, 3
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Endpoint_Write_Control_PStream_LE+0x4c>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d50:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     d54:	82 fd       	sbrc	r24, 2
     d56:	34 c0       	rjmp	.+104    	; 0xdc0 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d58:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d5c:	80 ff       	sbrs	r24, 0
     d5e:	23 c0       	rjmp	.+70     	; 0xda6 <Endpoint_Write_Control_PStream_LE+0xa2>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     d60:	80 91 f3 00 	lds	r24, 0x00F3
     d64:	90 91 f2 00 	lds	r25, 0x00F2
     d68:	78 2f       	mov	r23, r24
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	29 2f       	mov	r18, r25
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	26 2b       	or	r18, r22
     d72:	37 2b       	or	r19, r23
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <Endpoint_Write_Control_PStream_LE+0x82>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d76:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d78:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d7c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d7e:	41 50       	subi	r20, 0x01	; 1
     d80:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d86:	41 15       	cp	r20, r1
     d88:	51 05       	cpc	r21, r1
     d8a:	19 f0       	breq	.+6      	; 0xd92 <Endpoint_Write_Control_PStream_LE+0x8e>
     d8c:	28 30       	cpi	r18, 0x08	; 8
     d8e:	31 05       	cpc	r19, r1
     d90:	90 f3       	brcs	.-28     	; 0xd76 <Endpoint_Write_Control_PStream_LE+0x72>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	28 30       	cpi	r18, 0x08	; 8
     d96:	31 05       	cpc	r19, r1
     d98:	09 f4       	brne	.+2      	; 0xd9c <Endpoint_Write_Control_PStream_LE+0x98>
     d9a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d9c:	80 91 e8 00 	lds	r24, 0x00E8
     da0:	8e 77       	andi	r24, 0x7E	; 126
     da2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     da6:	41 15       	cp	r20, r1
     da8:	51 05       	cpc	r21, r1
     daa:	21 f6       	brne	.-120    	; 0xd34 <Endpoint_Write_Control_PStream_LE+0x30>
     dac:	99 23       	and	r25, r25
     dae:	09 f0       	breq	.+2      	; 0xdb2 <Endpoint_Write_Control_PStream_LE+0xae>
     db0:	c1 cf       	rjmp	.-126    	; 0xd34 <Endpoint_Write_Control_PStream_LE+0x30>
     db2:	06 c0       	rjmp	.+12     	; 0xdc0 <Endpoint_Write_Control_PStream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     db4:	80 91 c9 01 	lds	r24, 0x01C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     db8:	88 23       	and	r24, r24
     dba:	41 f0       	breq	.+16     	; 0xdcc <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dbc:	85 30       	cpi	r24, 0x05	; 5
     dbe:	41 f0       	breq	.+16     	; 0xdd0 <Endpoint_Write_Control_PStream_LE+0xcc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     dc0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     dc4:	82 ff       	sbrs	r24, 2
     dc6:	f6 cf       	rjmp	.-20     	; 0xdb4 <Endpoint_Write_Control_PStream_LE+0xb0>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	08 95       	ret
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	08 95       	ret
     dd0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     dd2:	08 95       	ret

00000dd4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	ac 97       	sbiw	r28, 0x2c	; 44
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	ea ec       	ldi	r30, 0xCA	; 202
     dee:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     df0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     df4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     df6:	21 e0       	ldi	r18, 0x01	; 1
     df8:	e2 3d       	cpi	r30, 0xD2	; 210
     dfa:	f2 07       	cpc	r31, r18
     dfc:	c9 f7       	brne	.-14     	; 0xdf0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     dfe:	09 da       	rcall	.-3054   	; 0x212 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e00:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     e04:	83 ff       	sbrs	r24, 3
     e06:	38 c1       	rjmp	.+624    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     e08:	80 91 ca 01 	lds	r24, 0x01CA

		switch (USB_ControlRequest.bRequest)
     e0c:	30 91 cb 01 	lds	r19, 0x01CB
     e10:	35 30       	cpi	r19, 0x05	; 5
     e12:	09 f4       	brne	.+2      	; 0xe16 <USB_Device_ProcessControlRequest+0x42>
     e14:	87 c0       	rjmp	.+270    	; 0xf24 <USB_Device_ProcessControlRequest+0x150>
     e16:	36 30       	cpi	r19, 0x06	; 6
     e18:	40 f4       	brcc	.+16     	; 0xe2a <USB_Device_ProcessControlRequest+0x56>
     e1a:	31 30       	cpi	r19, 0x01	; 1
     e1c:	c9 f1       	breq	.+114    	; 0xe90 <USB_Device_ProcessControlRequest+0xbc>
     e1e:	31 30       	cpi	r19, 0x01	; 1
     e20:	70 f0       	brcs	.+28     	; 0xe3e <USB_Device_ProcessControlRequest+0x6a>
     e22:	33 30       	cpi	r19, 0x03	; 3
     e24:	09 f0       	breq	.+2      	; 0xe28 <USB_Device_ProcessControlRequest+0x54>
     e26:	28 c1       	rjmp	.+592    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
     e28:	33 c0       	rjmp	.+102    	; 0xe90 <USB_Device_ProcessControlRequest+0xbc>
     e2a:	38 30       	cpi	r19, 0x08	; 8
     e2c:	09 f4       	brne	.+2      	; 0xe30 <USB_Device_ProcessControlRequest+0x5c>
     e2e:	f6 c0       	rjmp	.+492    	; 0x101c <USB_Device_ProcessControlRequest+0x248>
     e30:	39 30       	cpi	r19, 0x09	; 9
     e32:	09 f4       	brne	.+2      	; 0xe36 <USB_Device_ProcessControlRequest+0x62>
     e34:	05 c1       	rjmp	.+522    	; 0x1040 <USB_Device_ProcessControlRequest+0x26c>
     e36:	36 30       	cpi	r19, 0x06	; 6
     e38:	09 f0       	breq	.+2      	; 0xe3c <USB_Device_ProcessControlRequest+0x68>
     e3a:	1e c1       	rjmp	.+572    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
     e3c:	97 c0       	rjmp	.+302    	; 0xf6c <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e3e:	80 38       	cpi	r24, 0x80	; 128
     e40:	21 f0       	breq	.+8      	; 0xe4a <USB_Device_ProcessControlRequest+0x76>
     e42:	82 38       	cpi	r24, 0x82	; 130
     e44:	09 f0       	breq	.+2      	; 0xe48 <USB_Device_ProcessControlRequest+0x74>
     e46:	18 c1       	rjmp	.+560    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <USB_Device_ProcessControlRequest+0x86>
     e4a:	90 91 c6 01 	lds	r25, 0x01C6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e4e:	80 91 c7 01 	lds	r24, 0x01C7
     e52:	88 23       	and	r24, r24
     e54:	99 f0       	breq	.+38     	; 0xe7c <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e56:	92 60       	ori	r25, 0x02	; 2
     e58:	11 c0       	rjmp	.+34     	; 0xe7c <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5a:	80 91 ce 01 	lds	r24, 0x01CE
     e5e:	8f 70       	andi	r24, 0x0F	; 15
     e60:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e64:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	25 e0       	ldi	r18, 0x05	; 5
     e6c:	96 95       	lsr	r25
     e6e:	87 95       	ror	r24
     e70:	2a 95       	dec	r18
     e72:	e1 f7       	brne	.-8      	; 0xe6c <USB_Device_ProcessControlRequest+0x98>
     e74:	98 2f       	mov	r25, r24
     e76:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e78:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e7c:	80 91 e8 00 	lds	r24, 0x00E8
     e80:	87 7f       	andi	r24, 0xF7	; 247
     e82:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e86:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     e8a:	10 92 f1 00 	sts	0x00F1, r1
     e8e:	d1 c0       	rjmp	.+418    	; 0x1032 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e90:	88 23       	and	r24, r24
     e92:	19 f0       	breq	.+6      	; 0xe9a <USB_Device_ProcessControlRequest+0xc6>
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	09 f0       	breq	.+2      	; 0xe9a <USB_Device_ProcessControlRequest+0xc6>
     e98:	ef c0       	rjmp	.+478    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	8f 71       	andi	r24, 0x1F	; 31
     e9e:	90 70       	andi	r25, 0x00	; 0
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	21 f0       	breq	.+8      	; 0xeac <USB_Device_ProcessControlRequest+0xd8>
     ea4:	02 97       	sbiw	r24, 0x02	; 2
     ea6:	09 f0       	breq	.+2      	; 0xeaa <USB_Device_ProcessControlRequest+0xd6>
     ea8:	e7 c0       	rjmp	.+462    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
     eaa:	0c c0       	rjmp	.+24     	; 0xec4 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     eac:	80 91 cc 01 	lds	r24, 0x01CC
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <USB_Device_ProcessControlRequest+0xe2>
     eb4:	e1 c0       	rjmp	.+450    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     eb6:	10 92 c7 01 	sts	0x01C7, r1
     eba:	33 30       	cpi	r19, 0x03	; 3
     ebc:	69 f5       	brne	.+90     	; 0xf18 <USB_Device_ProcessControlRequest+0x144>
     ebe:	80 93 c7 01 	sts	0x01C7, r24
     ec2:	2a c0       	rjmp	.+84     	; 0xf18 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     ec4:	80 91 cc 01 	lds	r24, 0x01CC
     ec8:	88 23       	and	r24, r24
     eca:	31 f5       	brne	.+76     	; 0xf18 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ecc:	20 91 ce 01 	lds	r18, 0x01CE
     ed0:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     ed2:	09 f4       	brne	.+2      	; 0xed6 <USB_Device_ProcessControlRequest+0x102>
     ed4:	d1 c0       	rjmp	.+418    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ed6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     eda:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ede:	80 ff       	sbrs	r24, 0
     ee0:	1b c0       	rjmp	.+54     	; 0xf18 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ee2:	33 30       	cpi	r19, 0x03	; 3
     ee4:	21 f4       	brne	.+8      	; 0xeee <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ee6:	80 91 eb 00 	lds	r24, 0x00EB
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	13 c0       	rjmp	.+38     	; 0xf14 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     eee:	80 91 eb 00 	lds	r24, 0x00EB
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <USB_Device_ProcessControlRequest+0x12e>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	2a 95       	dec	r18
     f04:	e2 f7       	brpl	.-8      	; 0xefe <USB_Device_ProcessControlRequest+0x12a>
     f06:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     f0a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     f0e:	80 91 eb 00 	lds	r24, 0x00EB
     f12:	88 60       	ori	r24, 0x08	; 8
     f14:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f18:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f1c:	80 91 e8 00 	lds	r24, 0x00E8
     f20:	87 7f       	andi	r24, 0xF7	; 247
     f22:	8a c0       	rjmp	.+276    	; 0x1038 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     f24:	88 23       	and	r24, r24
     f26:	09 f0       	breq	.+2      	; 0xf2a <USB_Device_ProcessControlRequest+0x156>
     f28:	a7 c0       	rjmp	.+334    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     f2a:	10 91 cc 01 	lds	r17, 0x01CC
     f2e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f30:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f32:	f8 94       	cli
     f34:	80 91 e8 00 	lds	r24, 0x00E8
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f3e:	c9 dc       	rcall	.-1646   	; 0x8d2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f40:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     f44:	80 ff       	sbrs	r24, 0
     f46:	fc cf       	rjmp	.-8      	; 0xf40 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     f48:	80 91 e3 00 	lds	r24, 0x00E3
     f4c:	80 78       	andi	r24, 0x80	; 128
     f4e:	81 2b       	or	r24, r17

				UDADDR = Temp;
     f50:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     f5a:	11 23       	and	r17, r17
     f5c:	11 f4       	brne	.+4      	; 0xf62 <USB_Device_ProcessControlRequest+0x18e>
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <USB_Device_ProcessControlRequest+0x190>
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	80 93 c9 01 	sts	0x01C9, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f68:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     f6a:	86 c0       	rjmp	.+268    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f6c:	80 58       	subi	r24, 0x80	; 128
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	08 f0       	brcs	.+2      	; 0xf74 <USB_Device_ProcessControlRequest+0x1a0>
     f72:	82 c0       	rjmp	.+260    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     f74:	80 91 cc 01 	lds	r24, 0x01CC
     f78:	90 91 cd 01 	lds	r25, 0x01CD
     f7c:	23 e0       	ldi	r18, 0x03	; 3
     f7e:	8c 3d       	cpi	r24, 0xDC	; 220
     f80:	92 07       	cpc	r25, r18
     f82:	09 f0       	breq	.+2      	; 0xf86 <USB_Device_ProcessControlRequest+0x1b2>
     f84:	33 c0       	rjmp	.+102    	; 0xfec <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f8a:	8a e2       	ldi	r24, 0x2A	; 42
     f8c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f8e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f90:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     f92:	de 01       	movw	r26, r28
     f94:	15 96       	adiw	r26, 0x05	; 5
     f96:	6e e0       	ldi	r22, 0x0E	; 14
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f9c:	11 e2       	ldi	r17, 0x21	; 33
     f9e:	e6 2f       	mov	r30, r22
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	10 93 57 00 	sts	0x0057, r17
     fa6:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     fa8:	40 ff       	sbrs	r20, 0
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
     fac:	82 95       	swap	r24
     fae:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     fb8:	8a 30       	cpi	r24, 0x0A	; 10
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <USB_Device_ProcessControlRequest+0x1ee>
     fbc:	c9 01       	movw	r24, r18
     fbe:	c7 96       	adiw	r24, 0x37	; 55
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <USB_Device_ProcessControlRequest+0x1f2>
     fc2:	c9 01       	movw	r24, r18
     fc4:	c0 96       	adiw	r24, 0x30	; 48
     fc6:	8d 93       	st	X+, r24
     fc8:	9d 93       	st	X+, r25
     fca:	4f 5f       	subi	r20, 0xFF	; 255
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     fce:	44 31       	cpi	r20, 0x14	; 20
     fd0:	51 05       	cpc	r21, r1
     fd2:	29 f7       	brne	.-54     	; 0xf9e <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     fd4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd6:	80 91 e8 00 	lds	r24, 0x00E8
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     fe0:	ce 01       	movw	r24, r28
     fe2:	03 96       	adiw	r24, 0x03	; 3
     fe4:	6a e2       	ldi	r22, 0x2A	; 42
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	27 de       	rcall	.-946    	; 0xc38 <Endpoint_Write_Control_Stream_LE>
     fea:	12 c0       	rjmp	.+36     	; 0x1010 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     fec:	60 91 ce 01 	lds	r22, 0x01CE
     ff0:	ae 01       	movw	r20, r28
     ff2:	4f 5f       	subi	r20, 0xFF	; 255
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	cb db       	rcall	.-2154   	; 0x78e <CALLBACK_USB_GetDescriptor>
     ff8:	bc 01       	movw	r22, r24
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	09 f4       	brne	.+2      	; 0x1000 <USB_Device_ProcessControlRequest+0x22c>
     ffe:	3c c0       	rjmp	.+120    	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
    1000:	80 91 e8 00 	lds	r24, 0x00E8
    1004:	87 7f       	andi	r24, 0xF7	; 247
    1006:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	7a de       	rcall	.-780    	; 0xd04 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1010:	80 91 e8 00 	lds	r24, 0x00E8
    1014:	8b 77       	andi	r24, 0x7B	; 123
    1016:	80 93 e8 00 	sts	0x00E8, r24
    101a:	2e c0       	rjmp	.+92     	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    101c:	80 38       	cpi	r24, 0x80	; 128
    101e:	61 f5       	brne	.+88     	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1020:	80 91 e8 00 	lds	r24, 0x00E8
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    102a:	80 91 c5 01 	lds	r24, 0x01C5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    102e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1032:	80 91 e8 00 	lds	r24, 0x00E8
    1036:	8e 77       	andi	r24, 0x7E	; 126
    1038:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    103c:	4a dc       	rcall	.-1900   	; 0x8d2 <Endpoint_ClearStatusStage>
    103e:	1c c0       	rjmp	.+56     	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1040:	88 23       	and	r24, r24
    1042:	d1 f4       	brne	.+52     	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1044:	90 91 cc 01 	lds	r25, 0x01CC
    1048:	92 30       	cpi	r25, 0x02	; 2
    104a:	b0 f4       	brcc	.+44     	; 0x1078 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    104c:	80 91 e8 00 	lds	r24, 0x00E8
    1050:	87 7f       	andi	r24, 0xF7	; 247
    1052:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1056:	90 93 c5 01 	sts	0x01C5, r25

	Endpoint_ClearStatusStage();
    105a:	3b dc       	rcall	.-1930   	; 0x8d2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    105c:	80 91 c5 01 	lds	r24, 0x01C5
    1060:	88 23       	and	r24, r24
    1062:	31 f4       	brne	.+12     	; 0x1070 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1064:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1068:	87 fd       	sbrc	r24, 7
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <USB_Device_ProcessControlRequest+0x29c>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <USB_Device_ProcessControlRequest+0x29e>
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	80 93 c9 01 	sts	0x01C9, r24

	EVENT_USB_Device_ConfigurationChanged();
    1076:	d1 d8       	rcall	.-3678   	; 0x21a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1078:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    107c:	83 ff       	sbrs	r24, 3
    107e:	0a c0       	rjmp	.+20     	; 0x1094 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1080:	80 91 eb 00 	lds	r24, 0x00EB
    1084:	80 62       	ori	r24, 0x20	; 32
    1086:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    108a:	80 91 e8 00 	lds	r24, 0x00E8
    108e:	87 7f       	andi	r24, 0xF7	; 247
    1090:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1094:	ac 96       	adiw	r28, 0x2c	; 44
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	08 95       	ret

000010aa <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    10aa:	08 95       	ret

000010ac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    10ac:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    10ae:	80 91 c9 01 	lds	r24, 0x01C9
    10b2:	88 23       	and	r24, r24
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    10b6:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    10ba:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10be:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10c2:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    10c6:	83 ff       	sbrs	r24, 3
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <USB_USBTask+0x20>
		  USB_Device_ProcessControlRequest();
    10ca:	84 de       	rcall	.-760    	; 0xdd4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10cc:	1f 70       	andi	r17, 0x0F	; 15
    10ce:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    10d2:	1f 91       	pop	r17
    10d4:	08 95       	ret

000010d6 <CDC_Device_BytesReceived>:

	return ENDPOINT_READYWAIT_NoError;
}

uint16_t CDC_Device_BytesReceived(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10d6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10d8:	80 91 c9 01 	lds	r24, 0x01C9
    10dc:	84 30       	cpi	r24, 0x04	; 4
    10de:	61 f5       	brne	.+88     	; 0x1138 <CDC_Device_BytesReceived+0x62>
    10e0:	84 89       	ldd	r24, Z+20	; 0x14
    10e2:	95 89       	ldd	r25, Z+21	; 0x15
    10e4:	a6 89       	ldd	r26, Z+22	; 0x16
    10e6:	b7 89       	ldd	r27, Z+23	; 0x17
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	a1 05       	cpc	r26, r1
    10ec:	b1 05       	cpc	r27, r1
    10ee:	21 f1       	breq	.+72     	; 0x1138 <CDC_Device_BytesReceived+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10f0:	86 81       	ldd	r24, Z+6	; 0x06
    10f2:	8f 70       	andi	r24, 0x0F	; 15
    10f4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
	  return 0;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    10fc:	82 ff       	sbrs	r24, 2
    10fe:	1c c0       	rjmp	.+56     	; 0x1138 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1100:	40 91 f3 00 	lds	r20, 0x00F3
    1104:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (!(Endpoint_BytesInEndpoint()))
    1108:	94 2f       	mov	r25, r20
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	82 2b       	or	r24, r18
    1110:	93 2b       	or	r25, r19
    1112:	89 2b       	or	r24, r25
    1114:	31 f4       	brne	.+12     	; 0x1122 <CDC_Device_BytesReceived+0x4c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1116:	80 91 e8 00 	lds	r24, 0x00E8
    111a:	8b 77       	andi	r24, 0x7B	; 123
    111c:	80 93 e8 00 	sts	0x00E8, r24
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <CDC_Device_BytesReceived+0x62>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1122:	80 91 f3 00 	lds	r24, 0x00F3
    1126:	90 91 f2 00 	lds	r25, 0x00F2
    112a:	38 2f       	mov	r19, r24
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	49 2f       	mov	r20, r25
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	42 2b       	or	r20, r18
    1134:	53 2b       	or	r21, r19
    1136:	02 c0       	rjmp	.+4      	; 0x113c <CDC_Device_BytesReceived+0x66>
			Endpoint_ClearOUT();
			return 0;
		}
		else
		{
			return Endpoint_BytesInEndpoint();
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	50 e0       	ldi	r21, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
    113c:	ca 01       	movw	r24, r20
    113e:	08 95       	ret

00001140 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1140:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1142:	80 91 c9 01 	lds	r24, 0x01C9
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	99 f5       	brne	.+102    	; 0x11b0 <CDC_Device_ReceiveByte+0x70>
    114a:	84 89       	ldd	r24, Z+20	; 0x14
    114c:	95 89       	ldd	r25, Z+21	; 0x15
    114e:	a6 89       	ldd	r26, Z+22	; 0x16
    1150:	b7 89       	ldd	r27, Z+23	; 0x17
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	a1 05       	cpc	r26, r1
    1156:	b1 05       	cpc	r27, r1
    1158:	59 f1       	breq	.+86     	; 0x11b0 <CDC_Device_ReceiveByte+0x70>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    115a:	86 81       	ldd	r24, Z+6	; 0x06
    115c:	8f 70       	andi	r24, 0x0F	; 15
    115e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1162:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1166:	82 ff       	sbrs	r24, 2
    1168:	23 c0       	rjmp	.+70     	; 0x11b0 <CDC_Device_ReceiveByte+0x70>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    116a:	40 91 f3 00 	lds	r20, 0x00F3
    116e:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    1172:	94 2f       	mov	r25, r20
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	82 2b       	or	r24, r18
    117a:	93 2b       	or	r25, r19
    117c:	89 2b       	or	r24, r25
    117e:	19 f4       	brne	.+6      	; 0x1186 <CDC_Device_ReceiveByte+0x46>
    1180:	6f ef       	ldi	r22, 0xFF	; 255
    1182:	7f ef       	ldi	r23, 0xFF	; 255
    1184:	04 c0       	rjmp	.+8      	; 0x118e <CDC_Device_ReceiveByte+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1186:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    118a:	68 2f       	mov	r22, r24
    118c:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    118e:	40 91 f3 00 	lds	r20, 0x00F3
    1192:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
    1196:	94 2f       	mov	r25, r20
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	82 2b       	or	r24, r18
    119e:	93 2b       	or	r25, r19
    11a0:	89 2b       	or	r24, r25
    11a2:	41 f4       	brne	.+16     	; 0x11b4 <CDC_Device_ReceiveByte+0x74>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11a4:	80 91 e8 00 	lds	r24, 0x00E8
    11a8:	8b 77       	andi	r24, 0x7B	; 123
    11aa:	80 93 e8 00 	sts	0x00E8, r24
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <CDC_Device_ReceiveByte+0x74>
    11b0:	6f ef       	ldi	r22, 0xFF	; 255
    11b2:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    11b4:	cb 01       	movw	r24, r22
    11b6:	08 95       	ret

000011b8 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    11b8:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    11ba:	2e e0       	ldi	r18, 0x0E	; 14
    11bc:	db 01       	movw	r26, r22
    11be:	1d 92       	st	X+, r1
    11c0:	2a 95       	dec	r18
    11c2:	e9 f7       	brne	.-6      	; 0x11be <CDC_Device_CreateStream+0x6>
    11c4:	23 e0       	ldi	r18, 0x03	; 3
    11c6:	23 83       	std	Z+3, r18	; 0x03
    11c8:	25 e6       	ldi	r18, 0x65	; 101
    11ca:	39 e0       	ldi	r19, 0x09	; 9
    11cc:	31 87       	std	Z+9, r19	; 0x09
    11ce:	20 87       	std	Z+8, r18	; 0x08
    11d0:	2f ee       	ldi	r18, 0xEF	; 239
    11d2:	38 e0       	ldi	r19, 0x08	; 8
    11d4:	33 87       	std	Z+11, r19	; 0x0b
    11d6:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    11d8:	95 87       	std	Z+13, r25	; 0x0d
    11da:	84 87       	std	Z+12, r24	; 0x0c
}
    11dc:	08 95       	ret

000011de <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    11de:	fc 01       	movw	r30, r24
    11e0:	84 85       	ldd	r24, Z+12	; 0x0c
    11e2:	95 85       	ldd	r25, Z+13	; 0x0d
    11e4:	ad df       	rcall	.-166    	; 0x1140 <CDC_Device_ReceiveByte>
    11e6:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    11e8:	97 ff       	sbrs	r25, 7
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <CDC_Device_getchar+0x12>
    11ec:	2e ef       	ldi	r18, 0xFE	; 254
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    11f0:	c9 01       	movw	r24, r18
    11f2:	08 95       	ret

000011f4 <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
    11f4:	08 95       	ret

000011f6 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11f6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11f8:	80 91 c9 01 	lds	r24, 0x01C9
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	51 f5       	brne	.+84     	; 0x1254 <CDC_Device_Flush+0x5e>
    1200:	84 89       	ldd	r24, Z+20	; 0x14
    1202:	95 89       	ldd	r25, Z+21	; 0x15
    1204:	a6 89       	ldd	r26, Z+22	; 0x16
    1206:	b7 89       	ldd	r27, Z+23	; 0x17
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	a1 05       	cpc	r26, r1
    120c:	b1 05       	cpc	r27, r1
    120e:	11 f1       	breq	.+68     	; 0x1254 <CDC_Device_Flush+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	8f 70       	andi	r24, 0x0F	; 15
    1214:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1218:	40 91 f3 00 	lds	r20, 0x00F3
    121c:	20 91 f2 00 	lds	r18, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    1220:	94 2f       	mov	r25, r20
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	82 2b       	or	r24, r18
    1228:	93 2b       	or	r25, r19
    122a:	89 2b       	or	r24, r25
    122c:	a9 f0       	breq	.+42     	; 0x1258 <CDC_Device_Flush+0x62>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    122e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1232:	80 91 e8 00 	lds	r24, 0x00E8
    1236:	8e 77       	andi	r24, 0x7E	; 126
    1238:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    123c:	95 fd       	sbrc	r25, 5
    123e:	0c c0       	rjmp	.+24     	; 0x1258 <CDC_Device_Flush+0x62>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1240:	69 db       	rcall	.-2350   	; 0x914 <Endpoint_WaitUntilReady>
    1242:	98 2f       	mov	r25, r24
    1244:	88 23       	and	r24, r24
    1246:	49 f4       	brne	.+18     	; 0x125a <CDC_Device_Flush+0x64>
    1248:	80 91 e8 00 	lds	r24, 0x00E8
    124c:	8e 77       	andi	r24, 0x7E	; 126
    124e:	80 93 e8 00 	sts	0x00E8, r24
    1252:	03 c0       	rjmp	.+6      	; 0x125a <CDC_Device_Flush+0x64>
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	01 c0       	rjmp	.+2      	; 0x125a <CDC_Device_Flush+0x64>
    1258:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    125a:	89 2f       	mov	r24, r25
    125c:	08 95       	ret

0000125e <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    125e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1260:	80 91 c9 01 	lds	r24, 0x01C9
    1264:	84 30       	cpi	r24, 0x04	; 4
    1266:	51 f4       	brne	.+20     	; 0x127c <CDC_Device_USBTask+0x1e>
    1268:	84 89       	ldd	r24, Z+20	; 0x14
    126a:	95 89       	ldd	r25, Z+21	; 0x15
    126c:	a6 89       	ldd	r26, Z+22	; 0x16
    126e:	b7 89       	ldd	r27, Z+23	; 0x17
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	a1 05       	cpc	r26, r1
    1274:	b1 05       	cpc	r27, r1
    1276:	11 f0       	breq	.+4      	; 0x127c <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    1278:	cf 01       	movw	r24, r30
    127a:	bd cf       	rjmp	.-134    	; 0x11f6 <CDC_Device_Flush>
    127c:	08 95       	ret

0000127e <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    127e:	1f 93       	push	r17
    1280:	fc 01       	movw	r30, r24
    1282:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1284:	80 91 c9 01 	lds	r24, 0x01C9
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	e1 f4       	brne	.+56     	; 0x12c4 <CDC_Device_SendByte+0x46>
    128c:	84 89       	ldd	r24, Z+20	; 0x14
    128e:	95 89       	ldd	r25, Z+21	; 0x15
    1290:	a6 89       	ldd	r26, Z+22	; 0x16
    1292:	b7 89       	ldd	r27, Z+23	; 0x17
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	a1 05       	cpc	r26, r1
    1298:	b1 05       	cpc	r27, r1
    129a:	a1 f0       	breq	.+40     	; 0x12c4 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    129c:	81 81       	ldd	r24, Z+1	; 0x01
    129e:	8f 70       	andi	r24, 0x0F	; 15
    12a0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12a4:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    12a8:	85 fd       	sbrc	r24, 5
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <CDC_Device_SendByte+0x3e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ac:	80 91 e8 00 	lds	r24, 0x00E8
    12b0:	8e 77       	andi	r24, 0x7E	; 126
    12b2:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    12b6:	2e db       	rcall	.-2468   	; 0x914 <Endpoint_WaitUntilReady>
    12b8:	88 23       	and	r24, r24
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <CDC_Device_SendByte+0x48>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12bc:	10 93 f1 00 	sts	0x00F1, r17
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <CDC_Device_SendByte+0x48>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    12c4:	82 e0       	ldi	r24, 0x02	; 2
}
    12c6:	1f 91       	pop	r17
    12c8:	08 95       	ret

000012ca <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    12ca:	28 2f       	mov	r18, r24
    12cc:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    12ce:	84 85       	ldd	r24, Z+12	; 0x0c
    12d0:	95 85       	ldd	r25, Z+13	; 0x0d
    12d2:	62 2f       	mov	r22, r18
    12d4:	d4 df       	rcall	.-88     	; 0x127e <CDC_Device_SendByte>
    12d6:	88 23       	and	r24, r24
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <CDC_Device_putchar+0x16>
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <CDC_Device_putchar+0x1a>
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
}
    12e4:	c9 01       	movw	r24, r18
    12e6:	08 95       	ret

000012e8 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    12ee:	40 96       	adiw	r24, 0x10	; 16
    12f0:	fc 01       	movw	r30, r24
    12f2:	8b e0       	ldi	r24, 0x0B	; 11
    12f4:	df 01       	movw	r26, r30
    12f6:	1d 92       	st	X+, r1
    12f8:	8a 95       	dec	r24
    12fa:	e9 f7       	brne	.-6      	; 0x12f6 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    12fc:	82 e0       	ldi	r24, 0x02	; 2
    12fe:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    1300:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	a6 da       	rcall	.-2740   	; 0x85a <Endpoint_ConfigureEndpointTable>
    130e:	88 23       	and	r24, r24
    1310:	71 f0       	breq	.+28     	; 0x132e <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1312:	ce 01       	movw	r24, r28
    1314:	06 96       	adiw	r24, 0x06	; 6
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	a0 da       	rcall	.-2752   	; 0x85a <Endpoint_ConfigureEndpointTable>
    131a:	88 23       	and	r24, r24
    131c:	41 f0       	breq	.+16     	; 0x132e <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    131e:	ce 01       	movw	r24, r28
    1320:	0b 96       	adiw	r24, 0x0b	; 11
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	9a da       	rcall	.-2764   	; 0x85a <Endpoint_ConfigureEndpointTable>
    1326:	88 23       	and	r24, r24
    1328:	19 f0       	breq	.+6      	; 0x1330 <CDC_Device_ConfigureEndpoints+0x48>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <CDC_Device_ConfigureEndpoints+0x48>
    132e:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    133c:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1340:	83 ff       	sbrs	r24, 3
    1342:	a4 c0       	rjmp	.+328    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1344:	88 81       	ld	r24, Y
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	20 91 ce 01 	lds	r18, 0x01CE
    134c:	30 91 cf 01 	lds	r19, 0x01CF
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	09 f0       	breq	.+2      	; 0x1358 <CDC_Device_ProcessControlRequest+0x22>
    1356:	9a c0       	rjmp	.+308    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
	  return;

	switch (USB_ControlRequest.bRequest)
    1358:	80 91 cb 01 	lds	r24, 0x01CB
    135c:	81 32       	cpi	r24, 0x21	; 33
    135e:	69 f0       	breq	.+26     	; 0x137a <CDC_Device_ProcessControlRequest+0x44>
    1360:	82 32       	cpi	r24, 0x22	; 34
    1362:	20 f4       	brcc	.+8      	; 0x136c <CDC_Device_ProcessControlRequest+0x36>
    1364:	80 32       	cpi	r24, 0x20	; 32
    1366:	09 f0       	breq	.+2      	; 0x136a <CDC_Device_ProcessControlRequest+0x34>
    1368:	91 c0       	rjmp	.+290    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
    136a:	3c c0       	rjmp	.+120    	; 0x13e4 <CDC_Device_ProcessControlRequest+0xae>
    136c:	82 32       	cpi	r24, 0x22	; 34
    136e:	09 f4       	brne	.+2      	; 0x1372 <CDC_Device_ProcessControlRequest+0x3c>
    1370:	6b c0       	rjmp	.+214    	; 0x1448 <CDC_Device_ProcessControlRequest+0x112>
    1372:	83 32       	cpi	r24, 0x23	; 35
    1374:	09 f0       	breq	.+2      	; 0x1378 <CDC_Device_ProcessControlRequest+0x42>
    1376:	8a c0       	rjmp	.+276    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
    1378:	7b c0       	rjmp	.+246    	; 0x1470 <CDC_Device_ProcessControlRequest+0x13a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    137a:	80 91 ca 01 	lds	r24, 0x01CA
    137e:	81 3a       	cpi	r24, 0xA1	; 161
    1380:	09 f0       	breq	.+2      	; 0x1384 <CDC_Device_ProcessControlRequest+0x4e>
    1382:	84 c0       	rjmp	.+264    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1384:	80 91 e8 00 	lds	r24, 0x00E8
    1388:	87 7f       	andi	r24, 0xF7	; 247
    138a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    138e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1392:	80 ff       	sbrs	r24, 0
    1394:	fc cf       	rjmp	.-8      	; 0x138e <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1396:	8c 89       	ldd	r24, Y+20	; 0x14
    1398:	9d 89       	ldd	r25, Y+21	; 0x15
    139a:	ae 89       	ldd	r26, Y+22	; 0x16
    139c:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    139e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    13a2:	29 2f       	mov	r18, r25
    13a4:	3a 2f       	mov	r19, r26
    13a6:	4b 2f       	mov	r20, r27
    13a8:	55 27       	eor	r21, r21
    13aa:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    13ae:	9d 01       	movw	r18, r26
    13b0:	44 27       	eor	r20, r20
    13b2:	55 27       	eor	r21, r21
    13b4:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    13b8:	8b 2f       	mov	r24, r27
    13ba:	99 27       	eor	r25, r25
    13bc:	aa 27       	eor	r26, r26
    13be:	bb 27       	eor	r27, r27
    13c0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    13c4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13c6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    13ca:	89 8d       	ldd	r24, Y+25	; 0x19
    13cc:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    13d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13d2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13d6:	80 91 e8 00 	lds	r24, 0x00E8
    13da:	8e 77       	andi	r24, 0x7E	; 126
    13dc:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    13e0:	78 da       	rcall	.-2832   	; 0x8d2 <Endpoint_ClearStatusStage>
    13e2:	54 c0       	rjmp	.+168    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13e4:	80 91 ca 01 	lds	r24, 0x01CA
    13e8:	81 32       	cpi	r24, 0x21	; 33
    13ea:	09 f0       	breq	.+2      	; 0x13ee <CDC_Device_ProcessControlRequest+0xb8>
    13ec:	4f c0       	rjmp	.+158    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13ee:	80 91 e8 00 	lds	r24, 0x00E8
    13f2:	87 7f       	andi	r24, 0xF7	; 247
    13f4:	80 93 e8 00 	sts	0x00E8, r24
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <CDC_Device_ProcessControlRequest+0xce>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    13fa:	80 91 c9 01 	lds	r24, 0x01C9
    13fe:	88 23       	and	r24, r24
    1400:	09 f4       	brne	.+2      	; 0x1404 <CDC_Device_ProcessControlRequest+0xce>
    1402:	44 c0       	rjmp	.+136    	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1404:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1408:	82 ff       	sbrs	r24, 2
    140a:	f7 cf       	rjmp	.-18     	; 0x13fa <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    140c:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1410:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1414:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    1418:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    141c:	8c 8b       	std	Y+20, r24	; 0x14
    141e:	9d 8b       	std	Y+21, r25	; 0x15
    1420:	2e 8b       	std	Y+22, r18	; 0x16
    1422:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1424:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1428:	88 8f       	std	Y+24, r24	; 0x18
    142a:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    142e:	89 8f       	std	Y+25, r24	; 0x19
    1430:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1434:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1436:	80 91 e8 00 	lds	r24, 0x00E8
    143a:	8b 77       	andi	r24, 0x7B	; 123
    143c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1440:	48 da       	rcall	.-2928   	; 0x8d2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1442:	ce 01       	movw	r24, r28
    1444:	d7 de       	rcall	.-594    	; 0x11f4 <CDC_Device_Event_Stub>
    1446:	22 c0       	rjmp	.+68     	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1448:	80 91 ca 01 	lds	r24, 0x01CA
    144c:	81 32       	cpi	r24, 0x21	; 33
    144e:	f1 f4       	brne	.+60     	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1450:	80 91 e8 00 	lds	r24, 0x00E8
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    145a:	3b da       	rcall	.-2954   	; 0x8d2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    145c:	80 91 cc 01 	lds	r24, 0x01CC
    1460:	90 91 cd 01 	lds	r25, 0x01CD
    1464:	99 8b       	std	Y+17, r25	; 0x11
    1466:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1468:	ce 01       	movw	r24, r28
    146a:	0e 94 01 01 	call	0x202	; 0x202 <EVENT_CDC_Device_ControLineStateChanged>
    146e:	0e c0       	rjmp	.+28     	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1470:	80 91 ca 01 	lds	r24, 0x01CA
    1474:	81 32       	cpi	r24, 0x21	; 33
    1476:	51 f4       	brne	.+20     	; 0x148c <CDC_Device_ProcessControlRequest+0x156>
    1478:	80 91 e8 00 	lds	r24, 0x00E8
    147c:	87 7f       	andi	r24, 0xF7	; 247
    147e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1482:	27 da       	rcall	.-2994   	; 0x8d2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1484:	ce 01       	movw	r24, r28
    1486:	60 91 cc 01 	lds	r22, 0x01CC
    148a:	b4 de       	rcall	.-664    	; 0x11f4 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <atoi>:
    1492:	fc 01       	movw	r30, r24
    1494:	88 27       	eor	r24, r24
    1496:	99 27       	eor	r25, r25
    1498:	e8 94       	clt
    149a:	21 91       	ld	r18, Z+
    149c:	20 32       	cpi	r18, 0x20	; 32
    149e:	e9 f3       	breq	.-6      	; 0x149a <atoi+0x8>
    14a0:	29 30       	cpi	r18, 0x09	; 9
    14a2:	10 f0       	brcs	.+4      	; 0x14a8 <atoi+0x16>
    14a4:	2e 30       	cpi	r18, 0x0E	; 14
    14a6:	c8 f3       	brcs	.-14     	; 0x149a <atoi+0x8>
    14a8:	2b 32       	cpi	r18, 0x2B	; 43
    14aa:	39 f0       	breq	.+14     	; 0x14ba <atoi+0x28>
    14ac:	2d 32       	cpi	r18, 0x2D	; 45
    14ae:	31 f4       	brne	.+12     	; 0x14bc <atoi+0x2a>
    14b0:	68 94       	set
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <atoi+0x28>
    14b4:	0b d0       	rcall	.+22     	; 0x14cc <__mulhi_const_10>
    14b6:	82 0f       	add	r24, r18
    14b8:	91 1d       	adc	r25, r1
    14ba:	21 91       	ld	r18, Z+
    14bc:	20 53       	subi	r18, 0x30	; 48
    14be:	2a 30       	cpi	r18, 0x0A	; 10
    14c0:	c8 f3       	brcs	.-14     	; 0x14b4 <atoi+0x22>
    14c2:	1e f4       	brtc	.+6      	; 0x14ca <atoi+0x38>
    14c4:	90 95       	com	r25
    14c6:	81 95       	neg	r24
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	08 95       	ret

000014cc <__mulhi_const_10>:
    14cc:	7a e0       	ldi	r23, 0x0A	; 10
    14ce:	97 9f       	mul	r25, r23
    14d0:	90 2d       	mov	r25, r0
    14d2:	87 9f       	mul	r24, r23
    14d4:	80 2d       	mov	r24, r0
    14d6:	91 0d       	add	r25, r1
    14d8:	11 24       	eor	r1, r1
    14da:	08 95       	ret

000014dc <fputs>:
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	7c 01       	movw	r14, r24
    14ea:	8b 01       	movw	r16, r22
    14ec:	db 01       	movw	r26, r22
    14ee:	13 96       	adiw	r26, 0x03	; 3
    14f0:	8c 91       	ld	r24, X
    14f2:	81 fd       	sbrc	r24, 1
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <fputs+0x20>
    14f6:	cf ef       	ldi	r28, 0xFF	; 255
    14f8:	df ef       	ldi	r29, 0xFF	; 255
    14fa:	13 c0       	rjmp	.+38     	; 0x1522 <fputs+0x46>
    14fc:	c0 e0       	ldi	r28, 0x00	; 0
    14fe:	d0 e0       	ldi	r29, 0x00	; 0
    1500:	0b c0       	rjmp	.+22     	; 0x1518 <fputs+0x3c>
    1502:	d8 01       	movw	r26, r16
    1504:	18 96       	adiw	r26, 0x08	; 8
    1506:	ed 91       	ld	r30, X+
    1508:	fc 91       	ld	r31, X
    150a:	19 97       	sbiw	r26, 0x09	; 9
    150c:	b8 01       	movw	r22, r16
    150e:	09 95       	icall
    1510:	89 2b       	or	r24, r25
    1512:	11 f0       	breq	.+4      	; 0x1518 <fputs+0x3c>
    1514:	cf ef       	ldi	r28, 0xFF	; 255
    1516:	df ef       	ldi	r29, 0xFF	; 255
    1518:	f7 01       	movw	r30, r14
    151a:	81 91       	ld	r24, Z+
    151c:	7f 01       	movw	r14, r30
    151e:	88 23       	and	r24, r24
    1520:	81 f7       	brne	.-32     	; 0x1502 <fputs+0x26>
    1522:	ce 01       	movw	r24, r28
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	e6 e0       	ldi	r30, 0x06	; 6
    152a:	b7 c2       	rjmp	.+1390   	; 0x1a9a <__epilogue_restores__+0x18>

0000152c <sprintf>:
    152c:	ae e0       	ldi	r26, 0x0E	; 14
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e9       	ldi	r30, 0x9B	; 155
    1532:	fa e0       	ldi	r31, 0x0A	; 10
    1534:	98 c2       	rjmp	.+1328   	; 0x1a66 <__prologue_saves__+0x1c>
    1536:	0d 89       	ldd	r16, Y+21	; 0x15
    1538:	1e 89       	ldd	r17, Y+22	; 0x16
    153a:	86 e0       	ldi	r24, 0x06	; 6
    153c:	8c 83       	std	Y+4, r24	; 0x04
    153e:	1a 83       	std	Y+2, r17	; 0x02
    1540:	09 83       	std	Y+1, r16	; 0x01
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	9f e7       	ldi	r25, 0x7F	; 127
    1546:	9e 83       	std	Y+6, r25	; 0x06
    1548:	8d 83       	std	Y+5, r24	; 0x05
    154a:	9e 01       	movw	r18, r28
    154c:	27 5e       	subi	r18, 0xE7	; 231
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	6f 89       	ldd	r22, Y+23	; 0x17
    1556:	78 8d       	ldd	r23, Y+24	; 0x18
    1558:	a9 01       	movw	r20, r18
    155a:	09 d0       	rcall	.+18     	; 0x156e <vfprintf>
    155c:	2f 81       	ldd	r18, Y+7	; 0x07
    155e:	38 85       	ldd	r19, Y+8	; 0x08
    1560:	02 0f       	add	r16, r18
    1562:	13 1f       	adc	r17, r19
    1564:	f8 01       	movw	r30, r16
    1566:	10 82       	st	Z, r1
    1568:	2e 96       	adiw	r28, 0x0e	; 14
    156a:	e4 e0       	ldi	r30, 0x04	; 4
    156c:	98 c2       	rjmp	.+1328   	; 0x1a9e <__epilogue_restores__+0x1c>

0000156e <vfprintf>:
    156e:	ab e0       	ldi	r26, 0x0B	; 11
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ec eb       	ldi	r30, 0xBC	; 188
    1574:	fa e0       	ldi	r31, 0x0A	; 10
    1576:	69 c2       	rjmp	.+1234   	; 0x1a4a <__prologue_saves__>
    1578:	3c 01       	movw	r6, r24
    157a:	2b 01       	movw	r4, r22
    157c:	5a 01       	movw	r10, r20
    157e:	fc 01       	movw	r30, r24
    1580:	17 82       	std	Z+7, r1	; 0x07
    1582:	16 82       	std	Z+6, r1	; 0x06
    1584:	83 81       	ldd	r24, Z+3	; 0x03
    1586:	81 fd       	sbrc	r24, 1
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <vfprintf+0x22>
    158a:	6f ef       	ldi	r22, 0xFF	; 255
    158c:	7f ef       	ldi	r23, 0xFF	; 255
    158e:	b9 c1       	rjmp	.+882    	; 0x1902 <vfprintf+0x394>
    1590:	9a e0       	ldi	r25, 0x0A	; 10
    1592:	89 2e       	mov	r8, r25
    1594:	1e 01       	movw	r2, r28
    1596:	08 94       	sec
    1598:	21 1c       	adc	r2, r1
    159a:	31 1c       	adc	r3, r1
    159c:	f3 01       	movw	r30, r6
    159e:	23 81       	ldd	r18, Z+3	; 0x03
    15a0:	f2 01       	movw	r30, r4
    15a2:	23 fd       	sbrc	r18, 3
    15a4:	85 91       	lpm	r24, Z+
    15a6:	23 ff       	sbrs	r18, 3
    15a8:	81 91       	ld	r24, Z+
    15aa:	2f 01       	movw	r4, r30
    15ac:	88 23       	and	r24, r24
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <vfprintf+0x44>
    15b0:	a5 c1       	rjmp	.+842    	; 0x18fc <vfprintf+0x38e>
    15b2:	85 32       	cpi	r24, 0x25	; 37
    15b4:	39 f4       	brne	.+14     	; 0x15c4 <vfprintf+0x56>
    15b6:	23 fd       	sbrc	r18, 3
    15b8:	85 91       	lpm	r24, Z+
    15ba:	23 ff       	sbrs	r18, 3
    15bc:	81 91       	ld	r24, Z+
    15be:	2f 01       	movw	r4, r30
    15c0:	85 32       	cpi	r24, 0x25	; 37
    15c2:	21 f4       	brne	.+8      	; 0x15cc <vfprintf+0x5e>
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	b3 01       	movw	r22, r6
    15c8:	b6 d1       	rcall	.+876    	; 0x1936 <fputc>
    15ca:	e8 cf       	rjmp	.-48     	; 0x159c <vfprintf+0x2e>
    15cc:	98 2f       	mov	r25, r24
    15ce:	ff 24       	eor	r15, r15
    15d0:	ee 24       	eor	r14, r14
    15d2:	99 24       	eor	r9, r9
    15d4:	ff e1       	ldi	r31, 0x1F	; 31
    15d6:	ff 15       	cp	r31, r15
    15d8:	d0 f0       	brcs	.+52     	; 0x160e <vfprintf+0xa0>
    15da:	9b 32       	cpi	r25, 0x2B	; 43
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <vfprintf+0x8a>
    15de:	9c 32       	cpi	r25, 0x2C	; 44
    15e0:	28 f4       	brcc	.+10     	; 0x15ec <vfprintf+0x7e>
    15e2:	90 32       	cpi	r25, 0x20	; 32
    15e4:	59 f0       	breq	.+22     	; 0x15fc <vfprintf+0x8e>
    15e6:	93 32       	cpi	r25, 0x23	; 35
    15e8:	91 f4       	brne	.+36     	; 0x160e <vfprintf+0xa0>
    15ea:	0e c0       	rjmp	.+28     	; 0x1608 <vfprintf+0x9a>
    15ec:	9d 32       	cpi	r25, 0x2D	; 45
    15ee:	49 f0       	breq	.+18     	; 0x1602 <vfprintf+0x94>
    15f0:	90 33       	cpi	r25, 0x30	; 48
    15f2:	69 f4       	brne	.+26     	; 0x160e <vfprintf+0xa0>
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	24 c0       	rjmp	.+72     	; 0x1640 <vfprintf+0xd2>
    15f8:	52 e0       	ldi	r21, 0x02	; 2
    15fa:	f5 2a       	or	r15, r21
    15fc:	84 e0       	ldi	r24, 0x04	; 4
    15fe:	f8 2a       	or	r15, r24
    1600:	28 c0       	rjmp	.+80     	; 0x1652 <vfprintf+0xe4>
    1602:	98 e0       	ldi	r25, 0x08	; 8
    1604:	f9 2a       	or	r15, r25
    1606:	25 c0       	rjmp	.+74     	; 0x1652 <vfprintf+0xe4>
    1608:	e0 e1       	ldi	r30, 0x10	; 16
    160a:	fe 2a       	or	r15, r30
    160c:	22 c0       	rjmp	.+68     	; 0x1652 <vfprintf+0xe4>
    160e:	f7 fc       	sbrc	r15, 7
    1610:	29 c0       	rjmp	.+82     	; 0x1664 <vfprintf+0xf6>
    1612:	89 2f       	mov	r24, r25
    1614:	80 53       	subi	r24, 0x30	; 48
    1616:	8a 30       	cpi	r24, 0x0A	; 10
    1618:	70 f4       	brcc	.+28     	; 0x1636 <vfprintf+0xc8>
    161a:	f6 fe       	sbrs	r15, 6
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <vfprintf+0xba>
    161e:	98 9c       	mul	r9, r8
    1620:	90 2c       	mov	r9, r0
    1622:	11 24       	eor	r1, r1
    1624:	98 0e       	add	r9, r24
    1626:	15 c0       	rjmp	.+42     	; 0x1652 <vfprintf+0xe4>
    1628:	e8 9c       	mul	r14, r8
    162a:	e0 2c       	mov	r14, r0
    162c:	11 24       	eor	r1, r1
    162e:	e8 0e       	add	r14, r24
    1630:	f0 e2       	ldi	r31, 0x20	; 32
    1632:	ff 2a       	or	r15, r31
    1634:	0e c0       	rjmp	.+28     	; 0x1652 <vfprintf+0xe4>
    1636:	9e 32       	cpi	r25, 0x2E	; 46
    1638:	29 f4       	brne	.+10     	; 0x1644 <vfprintf+0xd6>
    163a:	f6 fc       	sbrc	r15, 6
    163c:	5f c1       	rjmp	.+702    	; 0x18fc <vfprintf+0x38e>
    163e:	40 e4       	ldi	r20, 0x40	; 64
    1640:	f4 2a       	or	r15, r20
    1642:	07 c0       	rjmp	.+14     	; 0x1652 <vfprintf+0xe4>
    1644:	9c 36       	cpi	r25, 0x6C	; 108
    1646:	19 f4       	brne	.+6      	; 0x164e <vfprintf+0xe0>
    1648:	50 e8       	ldi	r21, 0x80	; 128
    164a:	f5 2a       	or	r15, r21
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0xe4>
    164e:	98 36       	cpi	r25, 0x68	; 104
    1650:	49 f4       	brne	.+18     	; 0x1664 <vfprintf+0xf6>
    1652:	f2 01       	movw	r30, r4
    1654:	23 fd       	sbrc	r18, 3
    1656:	95 91       	lpm	r25, Z+
    1658:	23 ff       	sbrs	r18, 3
    165a:	91 91       	ld	r25, Z+
    165c:	2f 01       	movw	r4, r30
    165e:	99 23       	and	r25, r25
    1660:	09 f0       	breq	.+2      	; 0x1664 <vfprintf+0xf6>
    1662:	b8 cf       	rjmp	.-144    	; 0x15d4 <vfprintf+0x66>
    1664:	89 2f       	mov	r24, r25
    1666:	85 54       	subi	r24, 0x45	; 69
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	18 f0       	brcs	.+6      	; 0x1672 <vfprintf+0x104>
    166c:	80 52       	subi	r24, 0x20	; 32
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	38 f4       	brcc	.+14     	; 0x1680 <vfprintf+0x112>
    1672:	44 e0       	ldi	r20, 0x04	; 4
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	a4 0e       	add	r10, r20
    1678:	b5 1e       	adc	r11, r21
    167a:	5f e3       	ldi	r21, 0x3F	; 63
    167c:	59 83       	std	Y+1, r21	; 0x01
    167e:	0f c0       	rjmp	.+30     	; 0x169e <vfprintf+0x130>
    1680:	93 36       	cpi	r25, 0x63	; 99
    1682:	31 f0       	breq	.+12     	; 0x1690 <vfprintf+0x122>
    1684:	93 37       	cpi	r25, 0x73	; 115
    1686:	79 f0       	breq	.+30     	; 0x16a6 <vfprintf+0x138>
    1688:	93 35       	cpi	r25, 0x53	; 83
    168a:	09 f0       	breq	.+2      	; 0x168e <vfprintf+0x120>
    168c:	52 c0       	rjmp	.+164    	; 0x1732 <vfprintf+0x1c4>
    168e:	1f c0       	rjmp	.+62     	; 0x16ce <vfprintf+0x160>
    1690:	f5 01       	movw	r30, r10
    1692:	80 81       	ld	r24, Z
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	42 e0       	ldi	r20, 0x02	; 2
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	a4 0e       	add	r10, r20
    169c:	b5 1e       	adc	r11, r21
    169e:	61 01       	movw	r12, r2
    16a0:	01 e0       	ldi	r16, 0x01	; 1
    16a2:	10 e0       	ldi	r17, 0x00	; 0
    16a4:	11 c0       	rjmp	.+34     	; 0x16c8 <vfprintf+0x15a>
    16a6:	f5 01       	movw	r30, r10
    16a8:	c0 80       	ld	r12, Z
    16aa:	d1 80       	ldd	r13, Z+1	; 0x01
    16ac:	f6 fc       	sbrc	r15, 6
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <vfprintf+0x148>
    16b0:	6f ef       	ldi	r22, 0xFF	; 255
    16b2:	7f ef       	ldi	r23, 0xFF	; 255
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x14c>
    16b6:	69 2d       	mov	r22, r9
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	42 e0       	ldi	r20, 0x02	; 2
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	a4 0e       	add	r10, r20
    16c0:	b5 1e       	adc	r11, r21
    16c2:	c6 01       	movw	r24, r12
    16c4:	2d d1       	rcall	.+602    	; 0x1920 <strnlen>
    16c6:	8c 01       	movw	r16, r24
    16c8:	5f e7       	ldi	r21, 0x7F	; 127
    16ca:	f5 22       	and	r15, r21
    16cc:	13 c0       	rjmp	.+38     	; 0x16f4 <vfprintf+0x186>
    16ce:	f5 01       	movw	r30, r10
    16d0:	c0 80       	ld	r12, Z
    16d2:	d1 80       	ldd	r13, Z+1	; 0x01
    16d4:	f6 fc       	sbrc	r15, 6
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x170>
    16d8:	6f ef       	ldi	r22, 0xFF	; 255
    16da:	7f ef       	ldi	r23, 0xFF	; 255
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x174>
    16de:	69 2d       	mov	r22, r9
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	42 e0       	ldi	r20, 0x02	; 2
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	a4 0e       	add	r10, r20
    16e8:	b5 1e       	adc	r11, r21
    16ea:	c6 01       	movw	r24, r12
    16ec:	0e d1       	rcall	.+540    	; 0x190a <strnlen_P>
    16ee:	8c 01       	movw	r16, r24
    16f0:	50 e8       	ldi	r21, 0x80	; 128
    16f2:	f5 2a       	or	r15, r21
    16f4:	f3 fe       	sbrs	r15, 3
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <vfprintf+0x196>
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <vfprintf+0x1bc>
    16fa:	80 e2       	ldi	r24, 0x20	; 32
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	b3 01       	movw	r22, r6
    1700:	1a d1       	rcall	.+564    	; 0x1936 <fputc>
    1702:	ea 94       	dec	r14
    1704:	8e 2d       	mov	r24, r14
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	08 17       	cp	r16, r24
    170a:	19 07       	cpc	r17, r25
    170c:	b0 f3       	brcs	.-20     	; 0x16fa <vfprintf+0x18c>
    170e:	0d c0       	rjmp	.+26     	; 0x172a <vfprintf+0x1bc>
    1710:	f6 01       	movw	r30, r12
    1712:	f7 fc       	sbrc	r15, 7
    1714:	85 91       	lpm	r24, Z+
    1716:	f7 fe       	sbrs	r15, 7
    1718:	81 91       	ld	r24, Z+
    171a:	6f 01       	movw	r12, r30
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	b3 01       	movw	r22, r6
    1720:	0a d1       	rcall	.+532    	; 0x1936 <fputc>
    1722:	e1 10       	cpse	r14, r1
    1724:	ea 94       	dec	r14
    1726:	01 50       	subi	r16, 0x01	; 1
    1728:	10 40       	sbci	r17, 0x00	; 0
    172a:	01 15       	cp	r16, r1
    172c:	11 05       	cpc	r17, r1
    172e:	81 f7       	brne	.-32     	; 0x1710 <vfprintf+0x1a2>
    1730:	e2 c0       	rjmp	.+452    	; 0x18f6 <vfprintf+0x388>
    1732:	94 36       	cpi	r25, 0x64	; 100
    1734:	11 f0       	breq	.+4      	; 0x173a <vfprintf+0x1cc>
    1736:	99 36       	cpi	r25, 0x69	; 105
    1738:	61 f5       	brne	.+88     	; 0x1792 <vfprintf+0x224>
    173a:	f7 fe       	sbrs	r15, 7
    173c:	08 c0       	rjmp	.+16     	; 0x174e <vfprintf+0x1e0>
    173e:	f5 01       	movw	r30, r10
    1740:	20 81       	ld	r18, Z
    1742:	31 81       	ldd	r19, Z+1	; 0x01
    1744:	42 81       	ldd	r20, Z+2	; 0x02
    1746:	53 81       	ldd	r21, Z+3	; 0x03
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0a c0       	rjmp	.+20     	; 0x1762 <vfprintf+0x1f4>
    174e:	f5 01       	movw	r30, r10
    1750:	80 81       	ld	r24, Z
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	9c 01       	movw	r18, r24
    1756:	44 27       	eor	r20, r20
    1758:	37 fd       	sbrc	r19, 7
    175a:	40 95       	com	r20
    175c:	54 2f       	mov	r21, r20
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a8 0e       	add	r10, r24
    1764:	b9 1e       	adc	r11, r25
    1766:	9f e6       	ldi	r25, 0x6F	; 111
    1768:	f9 22       	and	r15, r25
    176a:	57 ff       	sbrs	r21, 7
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <vfprintf+0x212>
    176e:	50 95       	com	r21
    1770:	40 95       	com	r20
    1772:	30 95       	com	r19
    1774:	21 95       	neg	r18
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	4f 4f       	sbci	r20, 0xFF	; 255
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	e0 e8       	ldi	r30, 0x80	; 128
    177e:	fe 2a       	or	r15, r30
    1780:	ca 01       	movw	r24, r20
    1782:	b9 01       	movw	r22, r18
    1784:	a1 01       	movw	r20, r2
    1786:	2a e0       	ldi	r18, 0x0A	; 10
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	01 d1       	rcall	.+514    	; 0x198e <__ultoa_invert>
    178c:	d8 2e       	mov	r13, r24
    178e:	d2 18       	sub	r13, r2
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <vfprintf+0x2a2>
    1792:	95 37       	cpi	r25, 0x75	; 117
    1794:	29 f4       	brne	.+10     	; 0x17a0 <vfprintf+0x232>
    1796:	1f 2d       	mov	r17, r15
    1798:	1f 7e       	andi	r17, 0xEF	; 239
    179a:	2a e0       	ldi	r18, 0x0A	; 10
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	1d c0       	rjmp	.+58     	; 0x17da <vfprintf+0x26c>
    17a0:	1f 2d       	mov	r17, r15
    17a2:	19 7f       	andi	r17, 0xF9	; 249
    17a4:	9f 36       	cpi	r25, 0x6F	; 111
    17a6:	61 f0       	breq	.+24     	; 0x17c0 <vfprintf+0x252>
    17a8:	90 37       	cpi	r25, 0x70	; 112
    17aa:	20 f4       	brcc	.+8      	; 0x17b4 <vfprintf+0x246>
    17ac:	98 35       	cpi	r25, 0x58	; 88
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <vfprintf+0x244>
    17b0:	a5 c0       	rjmp	.+330    	; 0x18fc <vfprintf+0x38e>
    17b2:	0f c0       	rjmp	.+30     	; 0x17d2 <vfprintf+0x264>
    17b4:	90 37       	cpi	r25, 0x70	; 112
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <vfprintf+0x258>
    17b8:	98 37       	cpi	r25, 0x78	; 120
    17ba:	09 f0       	breq	.+2      	; 0x17be <vfprintf+0x250>
    17bc:	9f c0       	rjmp	.+318    	; 0x18fc <vfprintf+0x38e>
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <vfprintf+0x25a>
    17c0:	28 e0       	ldi	r18, 0x08	; 8
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <vfprintf+0x26c>
    17c6:	10 61       	ori	r17, 0x10	; 16
    17c8:	14 fd       	sbrc	r17, 4
    17ca:	14 60       	ori	r17, 0x04	; 4
    17cc:	20 e1       	ldi	r18, 0x10	; 16
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	04 c0       	rjmp	.+8      	; 0x17da <vfprintf+0x26c>
    17d2:	14 fd       	sbrc	r17, 4
    17d4:	16 60       	ori	r17, 0x06	; 6
    17d6:	20 e1       	ldi	r18, 0x10	; 16
    17d8:	32 e0       	ldi	r19, 0x02	; 2
    17da:	17 ff       	sbrs	r17, 7
    17dc:	08 c0       	rjmp	.+16     	; 0x17ee <vfprintf+0x280>
    17de:	f5 01       	movw	r30, r10
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	44 e0       	ldi	r20, 0x04	; 4
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <vfprintf+0x290>
    17ee:	f5 01       	movw	r30, r10
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	bc 01       	movw	r22, r24
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	42 e0       	ldi	r20, 0x02	; 2
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	a4 0e       	add	r10, r20
    1800:	b5 1e       	adc	r11, r21
    1802:	a1 01       	movw	r20, r2
    1804:	c4 d0       	rcall	.+392    	; 0x198e <__ultoa_invert>
    1806:	d8 2e       	mov	r13, r24
    1808:	d2 18       	sub	r13, r2
    180a:	8f e7       	ldi	r24, 0x7F	; 127
    180c:	f8 2e       	mov	r15, r24
    180e:	f1 22       	and	r15, r17
    1810:	f6 fe       	sbrs	r15, 6
    1812:	0b c0       	rjmp	.+22     	; 0x182a <vfprintf+0x2bc>
    1814:	5e ef       	ldi	r21, 0xFE	; 254
    1816:	f5 22       	and	r15, r21
    1818:	d9 14       	cp	r13, r9
    181a:	38 f4       	brcc	.+14     	; 0x182a <vfprintf+0x2bc>
    181c:	f4 fe       	sbrs	r15, 4
    181e:	07 c0       	rjmp	.+14     	; 0x182e <vfprintf+0x2c0>
    1820:	f2 fc       	sbrc	r15, 2
    1822:	05 c0       	rjmp	.+10     	; 0x182e <vfprintf+0x2c0>
    1824:	8f ee       	ldi	r24, 0xEF	; 239
    1826:	f8 22       	and	r15, r24
    1828:	02 c0       	rjmp	.+4      	; 0x182e <vfprintf+0x2c0>
    182a:	1d 2d       	mov	r17, r13
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <vfprintf+0x2c2>
    182e:	19 2d       	mov	r17, r9
    1830:	f4 fe       	sbrs	r15, 4
    1832:	0d c0       	rjmp	.+26     	; 0x184e <vfprintf+0x2e0>
    1834:	fe 01       	movw	r30, r28
    1836:	ed 0d       	add	r30, r13
    1838:	f1 1d       	adc	r31, r1
    183a:	80 81       	ld	r24, Z
    183c:	80 33       	cpi	r24, 0x30	; 48
    183e:	19 f4       	brne	.+6      	; 0x1846 <vfprintf+0x2d8>
    1840:	99 ee       	ldi	r25, 0xE9	; 233
    1842:	f9 22       	and	r15, r25
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <vfprintf+0x2e8>
    1846:	1f 5f       	subi	r17, 0xFF	; 255
    1848:	f2 fe       	sbrs	r15, 2
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <vfprintf+0x2e8>
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <vfprintf+0x2e6>
    184e:	8f 2d       	mov	r24, r15
    1850:	86 78       	andi	r24, 0x86	; 134
    1852:	09 f0       	breq	.+2      	; 0x1856 <vfprintf+0x2e8>
    1854:	1f 5f       	subi	r17, 0xFF	; 255
    1856:	0f 2d       	mov	r16, r15
    1858:	f3 fc       	sbrc	r15, 3
    185a:	13 c0       	rjmp	.+38     	; 0x1882 <vfprintf+0x314>
    185c:	f0 fe       	sbrs	r15, 0
    185e:	0e c0       	rjmp	.+28     	; 0x187c <vfprintf+0x30e>
    1860:	1e 15       	cp	r17, r14
    1862:	10 f0       	brcs	.+4      	; 0x1868 <vfprintf+0x2fa>
    1864:	9d 2c       	mov	r9, r13
    1866:	0a c0       	rjmp	.+20     	; 0x187c <vfprintf+0x30e>
    1868:	9d 2c       	mov	r9, r13
    186a:	9e 0c       	add	r9, r14
    186c:	91 1a       	sub	r9, r17
    186e:	1e 2d       	mov	r17, r14
    1870:	05 c0       	rjmp	.+10     	; 0x187c <vfprintf+0x30e>
    1872:	80 e2       	ldi	r24, 0x20	; 32
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	b3 01       	movw	r22, r6
    1878:	5e d0       	rcall	.+188    	; 0x1936 <fputc>
    187a:	1f 5f       	subi	r17, 0xFF	; 255
    187c:	1e 15       	cp	r17, r14
    187e:	c8 f3       	brcs	.-14     	; 0x1872 <vfprintf+0x304>
    1880:	04 c0       	rjmp	.+8      	; 0x188a <vfprintf+0x31c>
    1882:	1e 15       	cp	r17, r14
    1884:	10 f4       	brcc	.+4      	; 0x188a <vfprintf+0x31c>
    1886:	e1 1a       	sub	r14, r17
    1888:	01 c0       	rjmp	.+2      	; 0x188c <vfprintf+0x31e>
    188a:	ee 24       	eor	r14, r14
    188c:	04 ff       	sbrs	r16, 4
    188e:	0e c0       	rjmp	.+28     	; 0x18ac <vfprintf+0x33e>
    1890:	80 e3       	ldi	r24, 0x30	; 48
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	b3 01       	movw	r22, r6
    1896:	4f d0       	rcall	.+158    	; 0x1936 <fputc>
    1898:	02 ff       	sbrs	r16, 2
    189a:	1b c0       	rjmp	.+54     	; 0x18d2 <vfprintf+0x364>
    189c:	01 fd       	sbrc	r16, 1
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <vfprintf+0x338>
    18a0:	88 e7       	ldi	r24, 0x78	; 120
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <vfprintf+0x354>
    18a6:	88 e5       	ldi	r24, 0x58	; 88
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <vfprintf+0x354>
    18ac:	80 2f       	mov	r24, r16
    18ae:	86 78       	andi	r24, 0x86	; 134
    18b0:	81 f0       	breq	.+32     	; 0x18d2 <vfprintf+0x364>
    18b2:	01 ff       	sbrs	r16, 1
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x34c>
    18b6:	8b e2       	ldi	r24, 0x2B	; 43
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <vfprintf+0x34e>
    18ba:	80 e2       	ldi	r24, 0x20	; 32
    18bc:	f7 fc       	sbrc	r15, 7
    18be:	8d e2       	ldi	r24, 0x2D	; 45
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	b3 01       	movw	r22, r6
    18c4:	38 d0       	rcall	.+112    	; 0x1936 <fputc>
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <vfprintf+0x364>
    18c8:	80 e3       	ldi	r24, 0x30	; 48
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	b3 01       	movw	r22, r6
    18ce:	33 d0       	rcall	.+102    	; 0x1936 <fputc>
    18d0:	9a 94       	dec	r9
    18d2:	d9 14       	cp	r13, r9
    18d4:	c8 f3       	brcs	.-14     	; 0x18c8 <vfprintf+0x35a>
    18d6:	da 94       	dec	r13
    18d8:	f1 01       	movw	r30, r2
    18da:	ed 0d       	add	r30, r13
    18dc:	f1 1d       	adc	r31, r1
    18de:	80 81       	ld	r24, Z
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	b3 01       	movw	r22, r6
    18e4:	28 d0       	rcall	.+80     	; 0x1936 <fputc>
    18e6:	dd 20       	and	r13, r13
    18e8:	b1 f7       	brne	.-20     	; 0x18d6 <vfprintf+0x368>
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <vfprintf+0x388>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	b3 01       	movw	r22, r6
    18f2:	21 d0       	rcall	.+66     	; 0x1936 <fputc>
    18f4:	ea 94       	dec	r14
    18f6:	ee 20       	and	r14, r14
    18f8:	c9 f7       	brne	.-14     	; 0x18ec <vfprintf+0x37e>
    18fa:	50 ce       	rjmp	.-864    	; 0x159c <vfprintf+0x2e>
    18fc:	f3 01       	movw	r30, r6
    18fe:	66 81       	ldd	r22, Z+6	; 0x06
    1900:	77 81       	ldd	r23, Z+7	; 0x07
    1902:	cb 01       	movw	r24, r22
    1904:	2b 96       	adiw	r28, 0x0b	; 11
    1906:	e2 e1       	ldi	r30, 0x12	; 18
    1908:	bc c0       	rjmp	.+376    	; 0x1a82 <__epilogue_restores__>

0000190a <strnlen_P>:
    190a:	fc 01       	movw	r30, r24
    190c:	05 90       	lpm	r0, Z+
    190e:	61 50       	subi	r22, 0x01	; 1
    1910:	70 40       	sbci	r23, 0x00	; 0
    1912:	01 10       	cpse	r0, r1
    1914:	d8 f7       	brcc	.-10     	; 0x190c <strnlen_P+0x2>
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	8e 0f       	add	r24, r30
    191c:	9f 1f       	adc	r25, r31
    191e:	08 95       	ret

00001920 <strnlen>:
    1920:	fc 01       	movw	r30, r24
    1922:	61 50       	subi	r22, 0x01	; 1
    1924:	70 40       	sbci	r23, 0x00	; 0
    1926:	01 90       	ld	r0, Z+
    1928:	01 10       	cpse	r0, r1
    192a:	d8 f7       	brcc	.-10     	; 0x1922 <strnlen+0x2>
    192c:	80 95       	com	r24
    192e:	90 95       	com	r25
    1930:	8e 0f       	add	r24, r30
    1932:	9f 1f       	adc	r25, r31
    1934:	08 95       	ret

00001936 <fputc>:
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	8c 01       	movw	r16, r24
    1940:	eb 01       	movw	r28, r22
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	81 ff       	sbrs	r24, 1
    1946:	1b c0       	rjmp	.+54     	; 0x197e <fputc+0x48>
    1948:	82 ff       	sbrs	r24, 2
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <fputc+0x30>
    194c:	2e 81       	ldd	r18, Y+6	; 0x06
    194e:	3f 81       	ldd	r19, Y+7	; 0x07
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	64 f4       	brge	.+24     	; 0x1972 <fputc+0x3c>
    195a:	e8 81       	ld	r30, Y
    195c:	f9 81       	ldd	r31, Y+1	; 0x01
    195e:	01 93       	st	Z+, r16
    1960:	f9 83       	std	Y+1, r31	; 0x01
    1962:	e8 83       	st	Y, r30
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <fputc+0x3c>
    1966:	e8 85       	ldd	r30, Y+8	; 0x08
    1968:	f9 85       	ldd	r31, Y+9	; 0x09
    196a:	80 2f       	mov	r24, r16
    196c:	09 95       	icall
    196e:	89 2b       	or	r24, r25
    1970:	31 f4       	brne	.+12     	; 0x197e <fputc+0x48>
    1972:	8e 81       	ldd	r24, Y+6	; 0x06
    1974:	9f 81       	ldd	r25, Y+7	; 0x07
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	9f 83       	std	Y+7, r25	; 0x07
    197a:	8e 83       	std	Y+6, r24	; 0x06
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <fputc+0x4c>
    197e:	0f ef       	ldi	r16, 0xFF	; 255
    1980:	1f ef       	ldi	r17, 0xFF	; 255
    1982:	c8 01       	movw	r24, r16
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	08 95       	ret

0000198e <__ultoa_invert>:
    198e:	fa 01       	movw	r30, r20
    1990:	aa 27       	eor	r26, r26
    1992:	28 30       	cpi	r18, 0x08	; 8
    1994:	51 f1       	breq	.+84     	; 0x19ea <__ultoa_invert+0x5c>
    1996:	20 31       	cpi	r18, 0x10	; 16
    1998:	81 f1       	breq	.+96     	; 0x19fa <__ultoa_invert+0x6c>
    199a:	e8 94       	clt
    199c:	6f 93       	push	r22
    199e:	6e 7f       	andi	r22, 0xFE	; 254
    19a0:	6e 5f       	subi	r22, 0xFE	; 254
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	af 4f       	sbci	r26, 0xFF	; 255
    19aa:	b1 e0       	ldi	r27, 0x01	; 1
    19ac:	3e d0       	rcall	.+124    	; 0x1a2a <__ultoa_invert+0x9c>
    19ae:	b4 e0       	ldi	r27, 0x04	; 4
    19b0:	3c d0       	rcall	.+120    	; 0x1a2a <__ultoa_invert+0x9c>
    19b2:	67 0f       	add	r22, r23
    19b4:	78 1f       	adc	r23, r24
    19b6:	89 1f       	adc	r24, r25
    19b8:	9a 1f       	adc	r25, r26
    19ba:	a1 1d       	adc	r26, r1
    19bc:	68 0f       	add	r22, r24
    19be:	79 1f       	adc	r23, r25
    19c0:	8a 1f       	adc	r24, r26
    19c2:	91 1d       	adc	r25, r1
    19c4:	a1 1d       	adc	r26, r1
    19c6:	6a 0f       	add	r22, r26
    19c8:	71 1d       	adc	r23, r1
    19ca:	81 1d       	adc	r24, r1
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	20 d0       	rcall	.+64     	; 0x1a12 <__ultoa_invert+0x84>
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <__ultoa_invert+0x48>
    19d4:	68 94       	set
    19d6:	3f 91       	pop	r19
    19d8:	2a e0       	ldi	r18, 0x0A	; 10
    19da:	26 9f       	mul	r18, r22
    19dc:	11 24       	eor	r1, r1
    19de:	30 19       	sub	r19, r0
    19e0:	30 5d       	subi	r19, 0xD0	; 208
    19e2:	31 93       	st	Z+, r19
    19e4:	de f6       	brtc	.-74     	; 0x199c <__ultoa_invert+0xe>
    19e6:	cf 01       	movw	r24, r30
    19e8:	08 95       	ret
    19ea:	46 2f       	mov	r20, r22
    19ec:	47 70       	andi	r20, 0x07	; 7
    19ee:	40 5d       	subi	r20, 0xD0	; 208
    19f0:	41 93       	st	Z+, r20
    19f2:	b3 e0       	ldi	r27, 0x03	; 3
    19f4:	0f d0       	rcall	.+30     	; 0x1a14 <__ultoa_invert+0x86>
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__ultoa_invert+0x5c>
    19f8:	f6 cf       	rjmp	.-20     	; 0x19e6 <__ultoa_invert+0x58>
    19fa:	46 2f       	mov	r20, r22
    19fc:	4f 70       	andi	r20, 0x0F	; 15
    19fe:	40 5d       	subi	r20, 0xD0	; 208
    1a00:	4a 33       	cpi	r20, 0x3A	; 58
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <__ultoa_invert+0x7c>
    1a04:	49 5d       	subi	r20, 0xD9	; 217
    1a06:	31 fd       	sbrc	r19, 1
    1a08:	40 52       	subi	r20, 0x20	; 32
    1a0a:	41 93       	st	Z+, r20
    1a0c:	02 d0       	rcall	.+4      	; 0x1a12 <__ultoa_invert+0x84>
    1a0e:	a9 f7       	brne	.-22     	; 0x19fa <__ultoa_invert+0x6c>
    1a10:	ea cf       	rjmp	.-44     	; 0x19e6 <__ultoa_invert+0x58>
    1a12:	b4 e0       	ldi	r27, 0x04	; 4
    1a14:	a6 95       	lsr	r26
    1a16:	97 95       	ror	r25
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__ultoa_invert+0x86>
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	61 05       	cpc	r22, r1
    1a26:	71 05       	cpc	r23, r1
    1a28:	08 95       	ret
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	0a 2e       	mov	r0, r26
    1a30:	06 94       	lsr	r0
    1a32:	57 95       	ror	r21
    1a34:	47 95       	ror	r20
    1a36:	37 95       	ror	r19
    1a38:	27 95       	ror	r18
    1a3a:	ba 95       	dec	r27
    1a3c:	c9 f7       	brne	.-14     	; 0x1a30 <__ultoa_invert+0xa2>
    1a3e:	62 0f       	add	r22, r18
    1a40:	73 1f       	adc	r23, r19
    1a42:	84 1f       	adc	r24, r20
    1a44:	95 1f       	adc	r25, r21
    1a46:	a0 1d       	adc	r26, r0
    1a48:	08 95       	ret

00001a4a <__prologue_saves__>:
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	ca 1b       	sub	r28, r26
    1a74:	db 0b       	sbc	r29, r27
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	09 94       	ijmp

00001a82 <__epilogue_restores__>:
    1a82:	2a 88       	ldd	r2, Y+18	; 0x12
    1a84:	39 88       	ldd	r3, Y+17	; 0x11
    1a86:	48 88       	ldd	r4, Y+16	; 0x10
    1a88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a94:	b9 84       	ldd	r11, Y+9	; 0x09
    1a96:	c8 84       	ldd	r12, Y+8	; 0x08
    1a98:	df 80       	ldd	r13, Y+7	; 0x07
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa6:	ce 0f       	add	r28, r30
    1aa8:	d1 1d       	adc	r29, r1
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	ed 01       	movw	r28, r26
    1ab6:	08 95       	ret

00001ab8 <_exit>:
    1ab8:	f8 94       	cli

00001aba <__stop_program>:
    1aba:	ff cf       	rjmp	.-2      	; 0x1aba <__stop_program>
